PROGRAM PROG_MAIN
VAR_EXTERNAL
    Axis0                 : Axis_REF;   (*Right_back wheel Node 2,communication*)
    Axis1                 : Axis_REF;   (*Right_front wheel Node 1,EPOSP*)
    Axis2                 : Axis_REF;   (*Left_back wheel Node 3*)
    Axis3                 : Axis_REF;   (*Left_front wheel Node 4*)

END_VAR

VAR_GLOBAL

END_VAR

VAR

   	fbPower0							: MC_Power;
	fbPower1							: MC_Power;
	fbPower2							: MC_Power;
	fbPower3							: MC_Power;
	fbReset0							: MC_Reset;
	fbReset1							: MC_Reset;
	fbReset2							: MC_Reset;
	fbReset3							: MC_Reset;
	
	fbReadStatus0						: MC_ReadStatus;
	fbReadStatus1						: MC_ReadStatus;
	fbReadStatus2						: MC_ReadStatus;
	fbReadStatus3						: MC_ReadStatus;
	
	fbReadActualVelocity0				: MC_ReadActualVelocity;
	fbReadActualVelocity1				: MC_ReadActualVelocity;
	fbReadActualVelocity2				: MC_ReadActualVelocity;
	fbReadActualVelocity3				: MC_ReadActualVelocity;
	
	fbReadActualCurrent0				: MC_ReadActualCurrent;
	fbReadActualCurrent1				: MC_ReadActualCurrent;
	fbReadActualCurrent2				: MC_ReadActualCurrent;
	fbReadActualCurrent3				: MC_ReadActualCurrent;
	
	
	fbAxisMove0              			: MC_MoveVelocity;
	fbAxisStop0							: MC_Stop;
	fbAxisMove1              			: MC_MoveVelocity;
	fbAxisStop1							: MC_Stop;
	fbAxisMove2              			: MC_MoveVelocity;
	fbAxisStop2							: MC_Stop;
	fbAxisMove3              			: MC_MoveVelocity;
	fbAxisStop3							: MC_Stop;
	
	fbReadObject						: FB_MAIN_StateRead;
	fbWriteObject						: FB_MAIN_StateWrite;
	
	fbGetObjectEncoder		  			: MU_GetObject;
	fbSetObjectEncoder		  			: MU_SetObject;
	
	fbTimer								: TON;
	
	extractedValue						: UDINT := 0;
	velByte1							: UDINT;
	velByte2							: UDINT;
	leftSign							: UDINT;
	leftVeloc							: UDINT;
	freshByte							: UDINT;
	rightSign							: UDINT;
	rightVeloc							: UDINT;
	
	maxVelocity							: UDINT := 5500; 
	
	
	udEncoderTemp						: UDINT := 0;  
	dEncoderValue						: DINT := 0;       
									
	oExecuteReset0						: BOOL;
	oExecuteReset1						: BOOL;
	oExecutePower0						: BOOL;
	oExecutePower1						: BOOL;
	
	oExecuteTimerStart					: BOOL;
	oExecuteObjectReading				: BOOL;
	oExecuteObjectWriting				: BOOL;
	
	oExecuteObjectReadingEncoder		: BOOL;
	oExecuteObjectWritingEncoder		: BOOL;
	oExecuteAxisMove					: BOOL;
	
	
	fbGetVelocity			: MU_GetObject;
	fbGetCurrent			: MU_GetObject;
    fbWriteVelocity			: MU_SetObject;
	fbWriteCurrent			: MU_SetObject;
	
	velocityActualValue : UDINT;
	currentActualValue : UDINT;
	internalErrorCounter : UDINT;
	
	fbInitialize : FB_INITIALIZE;
	fbCanRecover : FB_CanRecover;
	
END_VAR

(*Automatically declared*)
VAR_EXTERNAL
	ESTATEMAIN : MAIN_STATE;
END_VAR
(** IF eStateMain = MAIN_Init THEN; **)
	(* if - Cond *)
	LD eStateMain
	EQ MAIN_Init
	JMPCN ODK_SKIP_000000000000001_000000000000001

		(* then - Stmts *)

(**     fbInitialize(Execute := FALSE); **)
		(* call - Stmt *)
		CAL fbInitialize (
			Execute := FALSE
		)

(** 	eStateMain := MAIN_Init_loop; **)
		(* assign - Stmt *)
		LD MAIN_Init_loop
		ST eStateMain

		JMP ODK_END_IF_000000000000001

(** ELSIF eStateMain = MAIN_Init_loop THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000001:
	LD eStateMain
	EQ MAIN_Init_loop
	JMPCN ODK_SKIP_000000000000001_000000000000002

		(* elsif - Stmts *)

(**     fbInitialize(Execute := TRUE); **)
		(* call - Stmt *)
		CAL fbInitialize (
			Execute := TRUE
		)

(** 	IF fbInitialize.Error THEN  	{*Hope, this never happens...*} **)
		(* if - Cond *)
		LD fbInitialize.Error
		JMPCN ODK_SKIP_000000000000002_000000000000001

			(* then - Stmts *)

(** 	    eStateMain := MAIN_Init; **)
			(* assign - Stmt *)
			LD MAIN_Init
			ST eStateMain

			JMP ODK_END_IF_000000000000002

(** 	ELSIF fbInitialize.Done THEN  **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_000000000000001:
		LD fbInitialize.Done
		JMPCN ODK_SKIP_000000000000002_000000000000002

			(* elsif - Stmts *)

(** 	    eStateMain := MAIN_ResetTimer; **)
			(* assign - Stmt *)
			LD MAIN_ResetTimer
			ST eStateMain

			JMP ODK_END_IF_000000000000002

(** 	END_IF; **)
		(* if - End *) 
		ODK_SKIP_000000000000002_000000000000002:
		ODK_END_IF_000000000000002:

		JMP ODK_END_IF_000000000000001

(** ELSIF eStateMain = MAIN_ResetTimer THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000002:
	LD eStateMain
	EQ MAIN_ResetTimer
	JMPCN ODK_SKIP_000000000000001_000000000000003

		(* elsif - Stmts *)

(**  **)
(**     {*reset the timer back to zero*} **)
(** 	 **)
(**     fbTimer (In := false, Pt := t#3s); **)
		(* call - Stmt *)
		CAL fbTimer (
			In := FALSE,
			Pt := t#3s
		)

(** 	 **)
(** 	{*read axis1 actual velocity*} **)
(** 	 **)
(** 	eStateMain := MAIN_Read_Velocity; **)
		(* assign - Stmt *)
		LD MAIN_Read_Velocity
		ST eStateMain

		JMP ODK_END_IF_000000000000001

(** 	 **)
(**  **)
(** {*Read from EPOSP velocity from 2028 Axis 1 EPOSP*} **)
(**  **)
(**  **)
(** ELSIF eStateMain = MAIN_Read_Velocity THEN  **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000003:
	LD eStateMain
	EQ MAIN_Read_Velocity
	JMPCN ODK_SKIP_000000000000001_000000000000004

		(* elsif - Stmts *)

(**     fbGetVelocity(Axis := Axis1, Enable := FALSE, Index := 16#2028 , Subindex := 16#00); **)
		(* call - Stmt *)
		CAL fbGetVelocity (
			Axis := Axis1,
			Enable := FALSE,
			Index := 16#2028,
			Subindex := 16#00
		)

(** 	eStateMain := MAIN_Read_Velocity_loop; **)
		(* assign - Stmt *)
		LD MAIN_Read_Velocity_loop
		ST eStateMain

		JMP ODK_END_IF_000000000000001

(** ELSIF eStateMain = MAIN_Read_Velocity_loop THEN  **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000004:
	LD eStateMain
	EQ MAIN_Read_Velocity_loop
	JMPCN ODK_SKIP_000000000000001_000000000000005

		(* elsif - Stmts *)

(**      **)
(** 	fbGetVelocity(Axis := Axis1, Enable := TRUE, Index := 16#2028, Subindex := 16#00); **)
		(* call - Stmt *)
		CAL fbGetVelocity (
			Axis := Axis1,
			Enable := TRUE,
			Index := 16#2028,
			Subindex := 16#00
		)

(** 	IF (fbGetVelocity.Error) THEN **)
		(* if - Cond *)
		LD fbGetVelocity.Error
		JMPCN ODK_SKIP_000000000000003_000000000000001

			(* then - Stmts *)

(** 	    internalErrorCounter := internalErrorCounter + 1; **)
			(* assign - Stmt *)
			LD internalErrorCounter
			ADD 1
			ST internalErrorCounter

(** 		eStateMain := MAIN_Init; **)
			(* assign - Stmt *)
			LD MAIN_Init
			ST eStateMain

			JMP ODK_END_IF_000000000000003

(** 	ELSIF (fbGetVelocity.Done) THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000003_000000000000001:
		LD fbGetVelocity.Done
		JMPCN ODK_SKIP_000000000000003_000000000000002

			(* elsif - Stmts *)

(** 	    velocityActualValue := fbGetVelocity.Value;  {*store velocity actual value to a global variable*} **)
			(* assign - Stmt *)
			LD fbGetVelocity.Value
			ST velocityActualValue

(**         IF (velocityActualValue>2147483647) then **)
			(* if - Cond *)
			LD velocityActualValue
			GT 2147483647
			JMPCN ODK_SKIP_000000000000004_000000000000001

				(* then - Stmts *)

(** 		    velocityActualValue := velocityActualValue+20000; **)
				(* assign - Stmt *)
				LD velocityActualValue
				ADD 20000
				ST velocityActualValue

				JMP ODK_END_IF_000000000000004

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_000000000000004_000000000000001:
			ODK_END_IF_000000000000004:

(** 		eStateMain := MAIN_Write_Velocity; **)
			(* assign - Stmt *)
			LD MAIN_Write_Velocity
			ST eStateMain

			JMP ODK_END_IF_000000000000003

(** 	END_IF; **)
		(* if - End *) 
		ODK_SKIP_000000000000003_000000000000002:
		ODK_END_IF_000000000000003:

		JMP ODK_END_IF_000000000000001

(** 	 **)
(**  **)
(** {*write EPOSP velocity to 206B register of epos-axis0 in order to read it There is no communication between PC and EPOSP *} **)
(**  **)
(** ELSIF eStateMain = MAIN_Write_Velocity THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000005:
	LD eStateMain
	EQ MAIN_Write_Velocity
	JMPCN ODK_SKIP_000000000000001_000000000000006

		(* elsif - Stmts *)

(**     fbWriteVelocity(Axis := Axis0, Execute := FALSE, Index := 16#206B, Subindex := 16#00, Value:= velocityActualValue); **)
		(* call - Stmt *)
		CAL fbWriteVelocity (
			Axis := Axis0,
			Execute := FALSE,
			Index := 16#206B,
			Subindex := 16#00,
			Value := velocityActualValue
		)

(** 	 **)
(** 	eStateMain := MAIN_Write_Velocity_loop; **)
		(* assign - Stmt *)
		LD MAIN_Write_Velocity_loop
		ST eStateMain

		JMP ODK_END_IF_000000000000001

(** 	 **)
(** ELSIF eStateMain = MAIN_Write_Velocity_loop THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000006:
	LD eStateMain
	EQ MAIN_Write_Velocity_loop
	JMPCN ODK_SKIP_000000000000001_000000000000007

		(* elsif - Stmts *)

(** 	fbWriteVelocity(Axis := Axis0, Execute := TRUE, Index := 16#206B, Subindex := 16#00, Value:= velocityActualValue); **)
		(* call - Stmt *)
		CAL fbWriteVelocity (
			Axis := Axis0,
			Execute := TRUE,
			Index := 16#206B,
			Subindex := 16#00,
			Value := velocityActualValue
		)

(**  **)
(** 	IF fbWriteVelocity.Error THEN **)
		(* if - Cond *)
		LD fbWriteVelocity.Error
		JMPCN ODK_SKIP_000000000000005_000000000000001

			(* then - Stmts *)

(** 	    eStateMain := MAIN_CanError; **)
			(* assign - Stmt *)
			LD MAIN_CanError
			ST eStateMain

			JMP ODK_END_IF_000000000000005

(** 	ELSIF fbWriteVelocity.Done THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000005_000000000000001:
		LD fbWriteVelocity.Done
		JMPCN ODK_SKIP_000000000000005_000000000000002

			(* elsif - Stmts *)

(** 	    eStateMain := MAIN_Read_Current; **)
			(* assign - Stmt *)
			LD MAIN_Read_Current
			ST eStateMain

			JMP ODK_END_IF_000000000000005

(** 	END_IF; **)
		(* if - End *) 
		ODK_SKIP_000000000000005_000000000000002:
		ODK_END_IF_000000000000005:

		JMP ODK_END_IF_000000000000001

(** 	 **)
(** {*Read EPOSP (axis 1) current from register 2027*}	 **)
(** 	 **)
(**  **)
(** ELSIF eStateMain = MAIN_Read_Current THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000007:
	LD eStateMain
	EQ MAIN_Read_Current
	JMPCN ODK_SKIP_000000000000001_000000000000008

		(* elsif - Stmts *)

(**     fbGetCurrent (Axis := Axis1, Enable := FALSE, Index := 16#2027 , Subindex := 16#00); **)
		(* call - Stmt *)
		CAL fbGetCurrent (
			Axis := Axis1,
			Enable := FALSE,
			Index := 16#2027,
			Subindex := 16#00
		)

(** 	eStateMain := MAIN_Read_Current_loop; **)
		(* assign - Stmt *)
		LD MAIN_Read_Current_loop
		ST eStateMain

		JMP ODK_END_IF_000000000000001

(** 	 **)
(** ELSIF eStateMain = MAIN_Read_Current_loop THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000008:
	LD eStateMain
	EQ MAIN_Read_Current_loop
	JMPCN ODK_SKIP_000000000000001_000000000000009

		(* elsif - Stmts *)

(**     fbGetCurrent (Axis := Axis1, Enable := true, Index := 16#2027 , Subindex := 16#00); **)
		(* call - Stmt *)
		CAL fbGetCurrent (
			Axis := Axis1,
			Enable := TRUE,
			Index := 16#2027,
			Subindex := 16#00
		)

(** 	IF fbGetCurrent.Error THEN **)
		(* if - Cond *)
		LD fbGetCurrent.Error
		JMPCN ODK_SKIP_000000000000006_000000000000001

			(* then - Stmts *)

(** 	    eStateMain := MAIN_Init; **)
			(* assign - Stmt *)
			LD MAIN_Init
			ST eStateMain

			JMP ODK_END_IF_000000000000006

(** 	ELSIF fbGetCurrent.Done THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000006_000000000000001:
		LD fbGetCurrent.Done
		JMPCN ODK_SKIP_000000000000006_000000000000002

			(* elsif - Stmts *)

(** 	    currentActualValue := fbGetCurrent.Value; **)
			(* assign - Stmt *)
			LD fbGetCurrent.Value
			ST currentActualValue

(** 		IF (currentActualValue>2147483647) THEN **)
			(* if - Cond *)
			LD currentActualValue
			GT 2147483647
			JMPCN ODK_SKIP_000000000000007_000000000000001

				(* then - Stmts *)

(** 		    currentActualValue := currentActualValue + 20000; **)
				(* assign - Stmt *)
				LD currentActualValue
				ADD 20000
				ST currentActualValue

				JMP ODK_END_IF_000000000000007

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_000000000000007_000000000000001:
			ODK_END_IF_000000000000007:

(** 		eStateMain := MAIN_Write_Current; **)
			(* assign - Stmt *)
			LD MAIN_Write_Current
			ST eStateMain

			JMP ODK_END_IF_000000000000006

(** 	END_IF; **)
		(* if - End *) 
		ODK_SKIP_000000000000006_000000000000002:
		ODK_END_IF_000000000000006:

		JMP ODK_END_IF_000000000000001

(** 	 **)
(** {*Write EPOSP current to 2030 register of epos communication (axis0)*} **)
(** 	 **)
(** ELSIF eStateMain = MAIN_Write_Current THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_000000000000009:
	LD eStateMain
	EQ MAIN_Write_Current
	JMPCN ODK_SKIP_000000000000001_00000000000000A

		(* elsif - Stmts *)

(**     fbWriteCurrent(Axis := Axis0, Execute := FALSE, Index := 16#2030, Subindex := 16#00, Value:= currentActualValue); **)
		(* call - Stmt *)
		CAL fbWriteCurrent (
			Axis := Axis0,
			Execute := FALSE,
			Index := 16#2030,
			Subindex := 16#00,
			Value := currentActualValue
		)

(** 	 **)
(** 	eStateMain := MAIN_Write_Current_loop; **)
		(* assign - Stmt *)
		LD MAIN_Write_Current_loop
		ST eStateMain

		JMP ODK_END_IF_000000000000001

(** 	 **)
(** ELSIF eStateMain = MAIN_Write_Current_loop THEN  **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_00000000000000A:
	LD eStateMain
	EQ MAIN_Write_Current_loop
	JMPCN ODK_SKIP_000000000000001_00000000000000B

		(* elsif - Stmts *)

(**     fbWriteCurrent(Axis := Axis0, Execute := TRUE, Index := 16#2030, Subindex := 16#00, Value:= currentActualValue); **)
		(* call - Stmt *)
		CAL fbWriteCurrent (
			Axis := Axis0,
			Execute := TRUE,
			Index := 16#2030,
			Subindex := 16#00,
			Value := currentActualValue
		)

(** 	 **)
(**     IF (fbWriteCurrent.Error) THEN **)
		(* if - Cond *)
		LD fbWriteCurrent.Error
		JMPCN ODK_SKIP_000000000000008_000000000000001

			(* then - Stmts *)

(** 	    eStateMain := MAIN_Init; **)
			(* assign - Stmt *)
			LD MAIN_Init
			ST eStateMain

			JMP ODK_END_IF_000000000000008

(** 	ELSIF (fbWriteCurrent.Done) THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000008_000000000000001:
		LD fbWriteCurrent.Done
		JMPCN ODK_SKIP_000000000000008_000000000000002

			(* elsif - Stmts *)

(** 	    eStateMain := MAIN_Read; **)
			(* assign - Stmt *)
			LD MAIN_Read
			ST eStateMain

			JMP ODK_END_IF_000000000000008

(** 	END_IF; **)
		(* if - End *) 
		ODK_SKIP_000000000000008_000000000000002:
		ODK_END_IF_000000000000008:

		JMP ODK_END_IF_000000000000001

(**  **)
(** ELSIF eStateMain = MAIN_Read THEN  **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_00000000000000B:
	LD eStateMain
	EQ MAIN_Read
	JMPCN ODK_SKIP_000000000000001_00000000000000C

		(* elsif - Stmts *)

(**      {*read the control word from EPOS*} **)
(** 	  **)
(** 	 fbReadObject (Axis := Axis0, Execute := FALSE); **)
		(* call - Stmt *)
		CAL fbReadObject (
			Axis := Axis0,
			Execute := FALSE
		)

(** 	 eStateMain := MAIN_Read_loop; **)
		(* assign - Stmt *)
		LD MAIN_Read_loop
		ST eStateMain

		JMP ODK_END_IF_000000000000001

(** 	  **)
(** ELSIF eStateMain = MAIN_Read_loop THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_00000000000000C:
	LD eStateMain
	EQ MAIN_Read_loop
	JMPCN ODK_SKIP_000000000000001_00000000000000D

		(* elsif - Stmts *)

(**     fbReadObject (Axis := Axis0, Execute := TRUE); **)
		(* call - Stmt *)
		CAL fbReadObject (
			Axis := Axis0,
			Execute := TRUE
		)

(** 	IF (fbReadObject.Error) THEN **)
		(* if - Cond *)
		LD fbReadObject.Error
		JMPCN ODK_SKIP_000000000000009_000000000000001

			(* then - Stmts *)

(** 	    eStateMain := MAIN_Init; **)
			(* assign - Stmt *)
			LD MAIN_Init
			ST eStateMain

			JMP ODK_END_IF_000000000000009

(** 	 **)
(** 	ELSIF fbReadObject.Done AND fbReadObject.Done1 THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000009_000000000000001:
		LD fbReadObject.Done
		AND fbReadObject.Done1
		JMPCN ODK_SKIP_000000000000009_000000000000002

			(* elsif - Stmts *)

(** 	{*Velocity Fresh*} **)
(** 	 **)
(** 	    extractedValue := fbReadObject.velocityWord; **)
			(* assign - Stmt *)
			LD fbReadObject.velocityWord
			ST extractedValue

(** 	 **)
(**  **)
(**  **)
(** 		{* Low Byte *} **)
(** 		velByte1 := extractedValue MOD 16#00010000; **)
			(* assign - Stmt *)
			LD extractedValue
			MOD 16#00010000
			ST velByte1

(** 		leftSign := ( velByte1 / 16#00004000 ) MOD 16#00000002; **)
			(* assign - Stmt *)
			LD velByte1
			DIV 16#00004000
			MOD 16#00000002
			ST leftSign

(** 		leftVeloc := velByte1 MOD 16#00004000; **)
			(* assign - Stmt *)
			LD velByte1
			MOD 16#00004000
			ST leftVeloc

(**  **)
(** 		{* High Byte *} **)
(** 		velByte2 := extractedValue / 16#00010000; **)
			(* assign - Stmt *)
			LD extractedValue
			DIV 16#00010000
			ST velByte2

(** 		rightSign := ( velByte2 / 16#00004000 ) MOD 16#00000002; **)
			(* assign - Stmt *)
			LD velByte2
			DIV 16#00004000
			MOD 16#00000002
			ST rightSign

(** 		rightVeloc := velByte2 MOD 16#00004000;  **)
			(* assign - Stmt *)
			LD velByte2
			MOD 16#00004000
			ST rightVeloc

(** 		eStateMain := MAIN_StateWrite; **)
			(* assign - Stmt *)
			LD MAIN_StateWrite
			ST eStateMain

(** 		 **)
(** 		fbTimer(In := false , Pt := t#3s); **)
			(* call - Stmt *)
			CAL fbTimer (
				In := FALSE,
				Pt := t#3s
			)

			JMP ODK_END_IF_000000000000009

(** 		 **)
(** 	ELSIF fbReadObject.Done THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000009_000000000000002:
		LD fbReadObject.Done
		JMPCN ODK_SKIP_000000000000009_000000000000003

			(* elsif - Stmts *)

(** 		eStateMain := MAIN_UpdateTimer; **)
			(* assign - Stmt *)
			LD MAIN_UpdateTimer
			ST eStateMain

			JMP ODK_END_IF_000000000000009

(** 	END_IF; **)
		(* if - End *) 
		ODK_SKIP_000000000000009_000000000000003:
		ODK_END_IF_000000000000009:

		JMP ODK_END_IF_000000000000001

(**  **)
(** ELSIF eStateMain = MAIN_UpdateTimer THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_00000000000000D:
	LD eStateMain
	EQ MAIN_UpdateTimer
	JMPCN ODK_SKIP_000000000000001_00000000000000E

		(* elsif - Stmts *)

(**  **)
(** 	fbTimer(In := TRUE , Pt := t#3s); **)
		(* call - Stmt *)
		CAL fbTimer (
			In := TRUE,
			Pt := t#3s
		)

(**  **)
(** 	IF fbTimer.Q THEN **)
		(* if - Cond *)
		LD fbTimer.Q
		JMPCN ODK_SKIP_00000000000000A_000000000000001

			(* then - Stmts *)

(** 		eStateMain := MAIN_StateHalt0; **)
			(* assign - Stmt *)
			LD MAIN_StateHalt0
			ST eStateMain

			JMP ODK_END_IF_00000000000000A

(** 	ELSE		 **)
		(* else *) 
		ODK_SKIP_00000000000000A_000000000000001:

			(* else - Stmts *)

(** 		eStateMain := MAIN_Read_Velocity; **)
			(* assign - Stmt *)
			LD MAIN_Read_Velocity
			ST eStateMain

(** 	END_IF; **)
		(* if - End *) 
		ODK_END_IF_00000000000000A:

		JMP ODK_END_IF_000000000000001

(** 	   **)
(** ELSIF eStateMain = MAIN_StateWrite THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_00000000000000E:
	LD eStateMain
	EQ MAIN_StateWrite
	JMPCN ODK_SKIP_000000000000001_00000000000000F

		(* elsif - Stmts *)

(**  **)
(** 	  fbWriteObject(Axis := Axis0, Execute := oExecuteObjectWriting, CurrentValue := extractedValue);                  **)
		(* call - Stmt *)
		CAL fbWriteObject (
			Axis := Axis0,
			Execute := oExecuteObjectWriting,
			CurrentValue := extractedValue
		)

(** 	  oExecuteObjectWriting := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST oExecuteObjectWriting

(** 	  **)
(** 	  IF fbWriteObject.Done AND (NOT fbWriteObject.Error) THEN				                            **)
		(* if - Cond *)
		LD fbWriteObject.Done
		AND ( fbWriteObject.Error
			NOT
		)
		JMPCN ODK_SKIP_00000000000000B_000000000000001

			(* then - Stmts *)

(** 	        oExecuteObjectWriting := FALSE;  **)
			(* assign - Stmt *)
			LD FALSE
			ST oExecuteObjectWriting

(** 			 **)
(** 			fbAxisMove0(Axis := Axis0, Execute := FALSE, Velocity := 1000 , Acceleration := 100 , Deceleration := 100 , Direction := MCpositive); **)
			(* call - Stmt *)
			CAL fbAxisMove0 (
				Axis := Axis0,
				Execute := FALSE,
				Velocity := 1000,
				Acceleration := 100,
				Deceleration := 100,
				Direction := MCpositive
			)

(**         	fbAxisMove1(Axis := Axis1, Execute := FALSE, Velocity := 1000 , Acceleration := 100 , Deceleration := 100 , Direction := MCpositive); **)
			(* call - Stmt *)
			CAL fbAxisMove1 (
				Axis := Axis1,
				Execute := FALSE,
				Velocity := 1000,
				Acceleration := 100,
				Deceleration := 100,
				Direction := MCpositive
			)

(** 			fbAxisMove2(Axis := Axis2, Execute := FALSE, Velocity := 1000 , Acceleration := 100 , Deceleration := 100 , Direction := MCpositive); **)
			(* call - Stmt *)
			CAL fbAxisMove2 (
				Axis := Axis2,
				Execute := FALSE,
				Velocity := 1000,
				Acceleration := 100,
				Deceleration := 100,
				Direction := MCpositive
			)

(**         	fbAxisMove3(Axis := Axis3, Execute := FALSE, Velocity := 1000 , Acceleration := 100 , Deceleration := 100 , Direction := MCpositive);     					 **)
			(* call - Stmt *)
			CAL fbAxisMove3 (
				Axis := Axis3,
				Execute := FALSE,
				Velocity := 1000,
				Acceleration := 100,
				Deceleration := 100,
				Direction := MCpositive
			)

(** 			fbAxisStop0(Axis := Axis0, Execute := FALSE); **)
			(* call - Stmt *)
			CAL fbAxisStop0 (
				Axis := Axis0,
				Execute := FALSE
			)

(** 			fbAxisStop1(Axis := Axis1, Execute := FALSE); **)
			(* call - Stmt *)
			CAL fbAxisStop1 (
				Axis := Axis1,
				Execute := FALSE
			)

(** 			fbAxisStop2(Axis := Axis2, Execute := FALSE); **)
			(* call - Stmt *)
			CAL fbAxisStop2 (
				Axis := Axis2,
				Execute := FALSE
			)

(** 			fbAxisStop3(Axis := Axis3, Execute := FALSE);				 **)
			(* call - Stmt *)
			CAL fbAxisStop3 (
				Axis := Axis3,
				Execute := FALSE
			)

(** 			fbWriteObject(Axis := Axis0, Execute := FALSE);	 **)
			(* call - Stmt *)
			CAL fbWriteObject (
				Axis := Axis0,
				Execute := FALSE
			)

(** 			fbWriteObject(Axis := Axis2, Execute := FALSE); **)
			(* call - Stmt *)
			CAL fbWriteObject (
				Axis := Axis2,
				Execute := FALSE
			)

(** 			fbWriteObject(Axis := Axis3, Execute := FALSE); **)
			(* call - Stmt *)
			CAL fbWriteObject (
				Axis := Axis3,
				Execute := FALSE
			)

(** 			oExecuteAxisMove := FALSE; **)
			(* assign - Stmt *)
			LD FALSE
			ST oExecuteAxisMove

(** 	        eStateMain := MAIN_StateAxis_Move;                                     			 **)
			(* assign - Stmt *)
			LD MAIN_StateAxis_Move
			ST eStateMain

			JMP ODK_END_IF_00000000000000B

(** 	  END_IF; **)
		(* if - End *) 
		ODK_SKIP_00000000000000B_000000000000001:
		ODK_END_IF_00000000000000B:

		JMP ODK_END_IF_000000000000001

(** 	   **)
(** ELSIF eStateMain = MAIN_StateHalt0 THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_00000000000000F:
	LD eStateMain
	EQ MAIN_StateHalt0
	JMPCN ODK_SKIP_000000000000001_00000000000000G

		(* elsif - Stmts *)

(**  **)
(** 	fbAxisStop0(Axis := Axis0 , Execute := FALSE , Deceleration := 10000); **)
		(* call - Stmt *)
		CAL fbAxisStop0 (
			Axis := Axis0,
			Execute := FALSE,
			Deceleration := 10000
		)

(** 	fbAxisStop1(Axis := Axis1 , Execute := FALSE , Deceleration := 10000); **)
		(* call - Stmt *)
		CAL fbAxisStop1 (
			Axis := Axis1,
			Execute := FALSE,
			Deceleration := 10000
		)

(** 	fbAxisStop2(Axis := Axis2 , Execute := FALSE , Deceleration := 10000); **)
		(* call - Stmt *)
		CAL fbAxisStop2 (
			Axis := Axis2,
			Execute := FALSE,
			Deceleration := 10000
		)

(** 	fbAxisStop3(Axis := Axis3 , Execute := FALSE , Deceleration := 10000); **)
		(* call - Stmt *)
		CAL fbAxisStop3 (
			Axis := Axis3,
			Execute := FALSE,
			Deceleration := 10000
		)

(**  **)
(** 	eStateMain := MAIN_StateHalt1; **)
		(* assign - Stmt *)
		LD MAIN_StateHalt1
		ST eStateMain

		JMP ODK_END_IF_000000000000001

(**  **)
(** ELSIF eStateMain = MAIN_StateHalt1 THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_00000000000000G:
	LD eStateMain
	EQ MAIN_StateHalt1
	JMPCN ODK_SKIP_000000000000001_00000000000000H

		(* elsif - Stmts *)

(**  **)
(**  **)
(** 	fbReadStatus0(Axis := Axis0 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadStatus0 (
			Axis := Axis0,
			Enable := TRUE
		)

(** 	fbReadStatus1(Axis := Axis1 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadStatus1 (
			Axis := Axis1,
			Enable := TRUE
		)

(** 	fbReadStatus2(Axis := Axis2 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadStatus2 (
			Axis := Axis2,
			Enable := TRUE
		)

(** 	fbReadStatus3(Axis := Axis3 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadStatus3 (
			Axis := Axis3,
			Enable := TRUE
		)

(** 	 **)
(**  **)
(** 	IF fbReadStatus0.Error OR fbReadStatus1.Error OR fbReadStatus2.Error OR fbReadStatus3.Error THEN **)
		(* if - Cond *)
		LD fbReadStatus0.Error
		OR fbReadStatus1.Error
		OR fbReadStatus2.Error
		OR fbReadStatus3.Error
		JMPCN ODK_SKIP_00000000000000C_000000000000001

			(* then - Stmts *)

(**  **)
(** 		{*cannot read the state of 1 or 2 or 3 or 4 controllers*} **)
(** 		{*go to state canError to check for errors*} **)
(** 		eStateMain := MAIN_CanError; **)
			(* assign - Stmt *)
			LD MAIN_CanError
			ST eStateMain

			JMP ODK_END_IF_00000000000000C

(**  **)
(** 	ELSIF fbReadStatus0.Valid AND fbReadStatus1.Valid AND fbReadStatus2.Valid AND fbReadStatus3.Valid THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000C_000000000000001:
		LD fbReadStatus0.Valid
		AND fbReadStatus1.Valid
		AND fbReadStatus2.Valid
		AND fbReadStatus3.Valid
		JMPCN ODK_SKIP_00000000000000C_000000000000002

			(* elsif - Stmts *)

(**  **)
(**  **)
(** 		IF fbAxisStop0.Error THEN **)
			(* if - Cond *)
			LD fbAxisStop0.Error
			JMPCN ODK_SKIP_00000000000000D_000000000000001

				(* then - Stmts *)

(** 			eStateMain := MAIN_CanError; **)
				(* assign - Stmt *)
				LD MAIN_CanError
				ST eStateMain

				JMP ODK_END_IF_00000000000000D

(** 		ELSIF NOT fbReadStatus0.StandStill THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000D_000000000000001:
			LD fbReadStatus0.StandStill
			NOT
			JMPCN ODK_SKIP_00000000000000D_000000000000002

				(* elsif - Stmts *)

(** 			fbAxisStop0(Axis := Axis0 , Execute := TRUE , Deceleration := 10000); **)
				(* call - Stmt *)
				CAL fbAxisStop0 (
					Axis := Axis0,
					Execute := TRUE,
					Deceleration := 10000
				)

				JMP ODK_END_IF_00000000000000D

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000D_000000000000002:
			ODK_END_IF_00000000000000D:

(** 	 **)
(** 		IF fbAxisStop1.Error THEN **)
			(* if - Cond *)
			LD fbAxisStop1.Error
			JMPCN ODK_SKIP_00000000000000E_000000000000001

				(* then - Stmts *)

(** 			eStateMain := MAIN_CanError; **)
				(* assign - Stmt *)
				LD MAIN_CanError
				ST eStateMain

				JMP ODK_END_IF_00000000000000E

(** 		ELSIF NOT fbReadStatus1.StandStill THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000E_000000000000001:
			LD fbReadStatus1.StandStill
			NOT
			JMPCN ODK_SKIP_00000000000000E_000000000000002

				(* elsif - Stmts *)

(** 			fbAxisStop1(Axis := Axis1 , Execute := TRUE , Deceleration := 10000); **)
				(* call - Stmt *)
				CAL fbAxisStop1 (
					Axis := Axis1,
					Execute := TRUE,
					Deceleration := 10000
				)

				JMP ODK_END_IF_00000000000000E

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000E_000000000000002:
			ODK_END_IF_00000000000000E:

(** 		IF fbAxisStop2.Error THEN **)
			(* if - Cond *)
			LD fbAxisStop2.Error
			JMPCN ODK_SKIP_00000000000000F_000000000000001

				(* then - Stmts *)

(** 			eStateMain := MAIN_CanError; **)
				(* assign - Stmt *)
				LD MAIN_CanError
				ST eStateMain

				JMP ODK_END_IF_00000000000000F

(** 		ELSIF NOT fbReadStatus2.StandStill THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000F_000000000000001:
			LD fbReadStatus2.StandStill
			NOT
			JMPCN ODK_SKIP_00000000000000F_000000000000002

				(* elsif - Stmts *)

(** 			fbAxisStop2(Axis := Axis2 , Execute := TRUE , Deceleration := 10000); **)
				(* call - Stmt *)
				CAL fbAxisStop2 (
					Axis := Axis2,
					Execute := TRUE,
					Deceleration := 10000
				)

				JMP ODK_END_IF_00000000000000F

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000F_000000000000002:
			ODK_END_IF_00000000000000F:

(** 	 **)
(** 		IF fbAxisStop3.Error THEN **)
			(* if - Cond *)
			LD fbAxisStop3.Error
			JMPCN ODK_SKIP_00000000000000G_000000000000001

				(* then - Stmts *)

(** 			eStateMain := MAIN_CanError; **)
				(* assign - Stmt *)
				LD MAIN_CanError
				ST eStateMain

				JMP ODK_END_IF_00000000000000G

(** 		ELSIF NOT fbReadStatus3.StandStill THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000G_000000000000001:
			LD fbReadStatus3.StandStill
			NOT
			JMPCN ODK_SKIP_00000000000000G_000000000000002

				(* elsif - Stmts *)

(** 			fbAxisStop3(Axis := Axis3 , Execute := TRUE , Deceleration := 10000); **)
				(* call - Stmt *)
				CAL fbAxisStop3 (
					Axis := Axis3,
					Execute := TRUE,
					Deceleration := 10000
				)

				JMP ODK_END_IF_00000000000000G

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000G_000000000000002:
			ODK_END_IF_00000000000000G:

(** 	 **)
(**  **)
(** 		IF fbReadStatus0.StandStill AND fbReadStatus1.StandStill AND fbReadStatus2.StandStill AND fbReadStatus3.StandStill THEN **)
			(* if - Cond *)
			LD fbReadStatus0.StandStill
			AND fbReadStatus1.StandStill
			AND fbReadStatus2.StandStill
			AND fbReadStatus3.StandStill
			JMPCN ODK_SKIP_00000000000000H_000000000000001

				(* then - Stmts *)

(** 		 **)
(** 			oExecuteAxisMove := FALSE; **)
				(* assign - Stmt *)
				LD FALSE
				ST oExecuteAxisMove

(** 		  	eStateMain := MAIN_ResetTimer; 	 **)
				(* assign - Stmt *)
				LD MAIN_ResetTimer
				ST eStateMain

				JMP ODK_END_IF_00000000000000H

(** 		 **)
(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000H_000000000000001:
			ODK_END_IF_00000000000000H:

			JMP ODK_END_IF_00000000000000C

(**  **)
(** 	END_IF; **)
		(* if - End *) 
		ODK_SKIP_00000000000000C_000000000000002:
		ODK_END_IF_00000000000000C:

		JMP ODK_END_IF_000000000000001

(**  **)
(** ELSIF eStateMain = MAIN_StateAxis_Move THEN **)
	(* elseif - Cond *) 
	ODK_SKIP_000000000000001_00000000000000H:
	LD eStateMain
	EQ MAIN_StateAxis_Move
	JMPCN ODK_SKIP_000000000000001_00000000000000I

		(* elsif - Stmts *)

(** 	   **)
(** 	  {* Limiter *} **)
(** 	  IF (leftVeloc > maxVelocity) THEN **)
		(* if - Cond *)
		LD leftVeloc
		GT maxVelocity
		JMPCN ODK_SKIP_00000000000000I_000000000000001

			(* then - Stmts *)

(** 	  	leftVeloc := maxVelocity; **)
			(* assign - Stmt *)
			LD maxVelocity
			ST leftVeloc

			JMP ODK_END_IF_00000000000000I

(** 	  END_IF; **)
		(* if - End *) 
		ODK_SKIP_00000000000000I_000000000000001:
		ODK_END_IF_00000000000000I:

(** 	   **)
(** 	  {* Limiter *} **)
(** 	  IF (rightVeloc > maxVelocity) THEN **)
		(* if - Cond *)
		LD rightVeloc
		GT maxVelocity
		JMPCN ODK_SKIP_00000000000000J_000000000000001

			(* then - Stmts *)

(** 	  	rightVeloc := maxVelocity; **)
			(* assign - Stmt *)
			LD maxVelocity
			ST rightVeloc

			JMP ODK_END_IF_00000000000000J

(** 	  END_IF; **)
		(* if - End *) 
		ODK_SKIP_00000000000000J_000000000000001:
		ODK_END_IF_00000000000000J:

(** 		 **)
(** 		 **)
(** 	  IF (rightVeloc = 0) THEN **)
		(* if - Cond *)
		LD rightVeloc
		EQ 0
		JMPCN ODK_SKIP_00000000000000K_000000000000001

			(* then - Stmts *)

(** 	  	fbAxisStop0(Axis := Axis0 , Execute := oExecuteAxisMove , Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop0 (
				Axis := Axis0,
				Execute := oExecuteAxisMove,
				Deceleration := 10000
			)

			JMP ODK_END_IF_00000000000000K

(** 	  ELSIF (rightSign = 1) THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000K_000000000000001:
		LD rightSign
		EQ 1
		JMPCN ODK_SKIP_00000000000000K_000000000000002

			(* elsif - Stmts *)

(**       	fbAxisMove0(Axis := Axis0, Execute := oExecuteAxisMove, Velocity := rightVeloc,               **)
			(* call - Stmt *)
			CAL fbAxisMove0 (
				Axis := Axis0,
				Execute := oExecuteAxisMove,
				Velocity := rightVeloc,
(**                 Acceleration := 10000, Deceleration := 10000,  **)
				Acceleration := 10000,
				Deceleration := 10000,
(** 				Direction := MCnegative); **)
				Direction := MCnegative
			)

			JMP ODK_END_IF_00000000000000K

(** 	  ELSE **)
		(* else *) 
		ODK_SKIP_00000000000000K_000000000000002:

			(* else - Stmts *)

(** 	  	fbAxisMove0(Axis := Axis0, Execute := oExecuteAxisMove, Velocity := rightVeloc,               **)
			(* call - Stmt *)
			CAL fbAxisMove0 (
				Axis := Axis0,
				Execute := oExecuteAxisMove,
				Velocity := rightVeloc,
(**                 Acceleration := 10000, Deceleration := 10000,  **)
				Acceleration := 10000,
				Deceleration := 10000,
(** 				Direction := MCpositive); **)
				Direction := MCpositive
			)

(** 	  END_IF;   **)
		(* if - End *) 
		ODK_END_IF_00000000000000K:

(** 	   **)
(** 	   **)
(** 	  IF (rightVeloc = 0) THEN **)
		(* if - Cond *)
		LD rightVeloc
		EQ 0
		JMPCN ODK_SKIP_00000000000000L_000000000000001

			(* then - Stmts *)

(** 	  	fbAxisStop1(Axis := Axis1 , Execute := oExecuteAxisMove , Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop1 (
				Axis := Axis1,
				Execute := oExecuteAxisMove,
				Deceleration := 10000
			)

			JMP ODK_END_IF_00000000000000L

(** 	  ELSIF (rightsign = 1) THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000L_000000000000001:
		LD rightSign
		EQ 1
		JMPCN ODK_SKIP_00000000000000L_000000000000002

			(* elsif - Stmts *)

(** 	  	fbAxisMove1(Axis := Axis1, Execute := oExecuteAxisMove, Velocity := rightVeloc,               **)
			(* call - Stmt *)
			CAL fbAxisMove1 (
				Axis := Axis1,
				Execute := oExecuteAxisMove,
				Velocity := rightVeloc,
(**                 Acceleration := 10000, Deceleration := 10000,  **)
				Acceleration := 10000,
				Deceleration := 10000,
(** 				Direction := MCnegative); **)
				Direction := MCnegative
			)

			JMP ODK_END_IF_00000000000000L

(** 	  ELSE		 **)
		(* else *) 
		ODK_SKIP_00000000000000L_000000000000002:

			(* else - Stmts *)

(** 	  	fbAxisMove1(Axis := Axis1, Execute := oExecuteAxisMove, Velocity := rightVeloc ,Acceleration := 10000, Deceleration := 10000, Direction := MCpositive); **)
			(* call - Stmt *)
			CAL fbAxisMove1 (
				Axis := Axis1,
				Execute := oExecuteAxisMove,
				Velocity := rightVeloc,
				Acceleration := 10000,
				Deceleration := 10000,
				Direction := MCpositive
			)

(** 	  END_IF; **)
		(* if - End *) 
		ODK_END_IF_00000000000000L:

(** 	   **)
(** 	  IF (leftVeloc = 0) THEN **)
		(* if - Cond *)
		LD leftVeloc
		EQ 0
		JMPCN ODK_SKIP_00000000000000M_000000000000001

			(* then - Stmts *)

(** 	  	fbAxisStop2(Axis := Axis2 , Execute := oExecuteAxisMove , Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop2 (
				Axis := Axis2,
				Execute := oExecuteAxisMove,
				Deceleration := 10000
			)

			JMP ODK_END_IF_00000000000000M

(** 	  ELSIF (leftSign = 1) THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000M_000000000000001:
		LD leftSign
		EQ 1
		JMPCN ODK_SKIP_00000000000000M_000000000000002

			(* elsif - Stmts *)

(**       	fbAxisMove2(Axis := Axis2, Execute := oExecuteAxisMove, Velocity := leftVeloc,               **)
			(* call - Stmt *)
			CAL fbAxisMove2 (
				Axis := Axis2,
				Execute := oExecuteAxisMove,
				Velocity := leftVeloc,
(**                 Acceleration := 10000, Deceleration := 10000,  **)
				Acceleration := 10000,
				Deceleration := 10000,
(** 				Direction := MCnegative); **)
				Direction := MCnegative
			)

			JMP ODK_END_IF_00000000000000M

(** 	  ELSE **)
		(* else *) 
		ODK_SKIP_00000000000000M_000000000000002:

			(* else - Stmts *)

(** 	  	fbAxisMove2(Axis := Axis2, Execute := oExecuteAxisMove, Velocity := leftVeloc,               **)
			(* call - Stmt *)
			CAL fbAxisMove2 (
				Axis := Axis2,
				Execute := oExecuteAxisMove,
				Velocity := leftVeloc,
(**                 Acceleration := 10000, Deceleration := 10000,  **)
				Acceleration := 10000,
				Deceleration := 10000,
(** 				Direction := MCpositive); **)
				Direction := MCpositive
			)

(** 	  END_IF;   **)
		(* if - End *) 
		ODK_END_IF_00000000000000M:

(** 	   **)
(** 	   **)
(** 	  IF (leftVeloc = 0) THEN **)
		(* if - Cond *)
		LD leftVeloc
		EQ 0
		JMPCN ODK_SKIP_00000000000000N_000000000000001

			(* then - Stmts *)

(** 	  	fbAxisStop3(Axis := Axis3 , Execute := oExecuteAxisMove , Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop3 (
				Axis := Axis3,
				Execute := oExecuteAxisMove,
				Deceleration := 10000
			)

			JMP ODK_END_IF_00000000000000N

(** 	  ELSIF (leftsign = 1) THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000N_000000000000001:
		LD leftSign
		EQ 1
		JMPCN ODK_SKIP_00000000000000N_000000000000002

			(* elsif - Stmts *)

(** 	  	fbAxisMove3(Axis := Axis3, Execute := oExecuteAxisMove, Velocity := leftVeloc,               **)
			(* call - Stmt *)
			CAL fbAxisMove3 (
				Axis := Axis3,
				Execute := oExecuteAxisMove,
				Velocity := leftVeloc,
(**                 Acceleration := 10000, Deceleration := 10000,  **)
				Acceleration := 10000,
				Deceleration := 10000,
(** 				Direction := MCnegative); **)
				Direction := MCnegative
			)

			JMP ODK_END_IF_00000000000000N

(** 	  ELSE		 **)
		(* else *) 
		ODK_SKIP_00000000000000N_000000000000002:

			(* else - Stmts *)

(** 	  	fbAxisMove3(Axis := Axis3, Execute := oExecuteAxisMove, Velocity := leftVeloc ,Acceleration := 10000, Deceleration := 10000, Direction := MCpositive); **)
			(* call - Stmt *)
			CAL fbAxisMove3 (
				Axis := Axis3,
				Execute := oExecuteAxisMove,
				Velocity := leftVeloc,
				Acceleration := 10000,
				Deceleration := 10000,
				Direction := MCpositive
			)

(** 	  END_IF; **)
		(* if - End *) 
		ODK_END_IF_00000000000000N:

(** 	   **)
(** 	  oExecuteAxisMove := TRUE; **)
		(* assign - Stmt *)
		LD TRUE
		ST oExecuteAxisMove

(** 	   **)
(**  **)
(** 	  fbReadStatus0(Axis := Axis0 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadStatus0 (
			Axis := Axis0,
			Enable := TRUE
		)

(** 	  fbReadStatus1(Axis := Axis1 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadStatus1 (
			Axis := Axis1,
			Enable := TRUE
		)

(** 	  fbReadStatus2(Axis := Axis2 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadStatus2 (
			Axis := Axis2,
			Enable := TRUE
		)

(** 	  fbReadStatus3(Axis := Axis3 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadStatus3 (
			Axis := Axis3,
			Enable := TRUE
		)

(** 	   **)
(** 	  fbReadActualVelocity0(Axis := Axis0 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadActualVelocity0 (
			Axis := Axis0,
			Enable := TRUE
		)

(** 	  fbReadActualVelocity1(Axis := Axis1 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadActualVelocity1 (
			Axis := Axis1,
			Enable := TRUE
		)

(** 	  fbReadActualVelocity2(Axis := Axis2 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadActualVelocity2 (
			Axis := Axis2,
			Enable := TRUE
		)

(** 	  fbReadActualVelocity3(Axis := Axis3 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadActualVelocity3 (
			Axis := Axis3,
			Enable := TRUE
		)

(** 	   **)
(** 	  fbReadActualCurrent0(Axis := Axis0 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadActualCurrent0 (
			Axis := Axis0,
			Enable := TRUE
		)

(** 	  fbReadActualCurrent1(Axis := Axis1 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadActualCurrent1 (
			Axis := Axis1,
			Enable := TRUE
		)

(** 	  fbReadActualCurrent2(Axis := Axis2 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadActualCurrent2 (
			Axis := Axis2,
			Enable := TRUE
		)

(** 	  fbReadActualCurrent3(Axis := Axis3 , Enable := TRUE); **)
		(* call - Stmt *)
		CAL fbReadActualCurrent3 (
			Axis := Axis3,
			Enable := TRUE
		)

(**  **)
(** 	   **)
(** 			 **)
(** 	  IF fbAxisMove0.Error THEN    **)
		(* if - Cond *)
		LD fbAxisMove0.Error
		JMPCN ODK_SKIP_00000000000000O_000000000000001

			(* then - Stmts *)

(** 	  	eStateMain := MAIN_Init;   **)
			(* assign - Stmt *)
			LD MAIN_Init
			ST eStateMain

			JMP ODK_END_IF_00000000000000O

(** 	  ELSIF fbAxisStop0.Error THEN    **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000O_000000000000001:
		LD fbAxisStop0.Error
		JMPCN ODK_SKIP_00000000000000O_000000000000002

			(* elsif - Stmts *)

(** 	  	eStateMain := MAIN_Init;      **)
			(* assign - Stmt *)
			LD MAIN_Init
			ST eStateMain

			JMP ODK_END_IF_00000000000000O

(** 	  ELSIF fbAxisMove1.Error THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000O_000000000000002:
		LD fbAxisMove1.Error
		JMPCN ODK_SKIP_00000000000000O_000000000000003

			(* elsif - Stmts *)

(** 	  	eStateMain := MAIN_Init;  **)
			(* assign - Stmt *)
			LD MAIN_Init
			ST eStateMain

			JMP ODK_END_IF_00000000000000O

(** 	  ELSIF fbAxisStop1.Error THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000O_000000000000003:
		LD fbAxisStop1.Error
		JMPCN ODK_SKIP_00000000000000O_000000000000004

			(* elsif - Stmts *)

(** 	  	eStateMain := MAIN_Init; **)
			(* assign - Stmt *)
			LD MAIN_Init
			ST eStateMain

(** 	  IF fbAxisMove2.Error THEN    **)
			(* if - Cond *)
			LD fbAxisMove2.Error
			JMPCN ODK_SKIP_00000000000000P_000000000000001

				(* then - Stmts *)

(** 	  	eStateMain := MAIN_Init;   **)
				(* assign - Stmt *)
				LD MAIN_Init
				ST eStateMain

				JMP ODK_END_IF_00000000000000P

(** 	  ELSIF fbAxisStop2.Error THEN    **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000P_000000000000001:
			LD fbAxisStop2.Error
			JMPCN ODK_SKIP_00000000000000P_000000000000002

				(* elsif - Stmts *)

(** 	  	eStateMain := MAIN_Init;      **)
				(* assign - Stmt *)
				LD MAIN_Init
				ST eStateMain

				JMP ODK_END_IF_00000000000000P

(** 	  ELSIF fbAxisMove3.Error THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000P_000000000000002:
			LD fbAxisMove3.Error
			JMPCN ODK_SKIP_00000000000000P_000000000000003

				(* elsif - Stmts *)

(** 	  	eStateMain := MAIN_Init;  **)
				(* assign - Stmt *)
				LD MAIN_Init
				ST eStateMain

				JMP ODK_END_IF_00000000000000P

(** 	  ELSIF fbAxisStop3.Error THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000P_000000000000003:
			LD fbAxisStop3.Error
			JMPCN ODK_SKIP_00000000000000P_000000000000004

				(* elsif - Stmts *)

(** 	  	eStateMain := MAIN_Init;     **)
				(* assign - Stmt *)
				LD MAIN_Init
				ST eStateMain

				JMP ODK_END_IF_00000000000000P

(** 	  ELSIF (fbAxisMove0.InVelocity OR fbAxisStop0.Done ) AND (fbAxisMove1.InVelocity OR fbAxisStop1.Done ) AND  **)
(** 	        (fbAxisMove2.InVelocity OR fbAxisStop2.Done ) AND (fbAxisMove3.InVelocity OR fbAxisStop3.Done ) AND **)
(** 	  			fbReadStatus0.Valid AND (fbReadStatus0.ContinuousMotion OR fbReadStatus0.StandStill) AND  **)
(** 				fbReadStatus1.Valid AND (fbReadStatus1.ContinuousMotion OR fbReadStatus1.StandStill) AND **)
(** 				fbReadStatus2.Valid AND (fbReadStatus2.ContinuousMotion OR fbReadStatus2.StandStill) AND  **)
(** 				fbReadStatus3.Valid AND (fbReadStatus3.ContinuousMotion OR fbReadStatus3.StandStill) THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000P_000000000000004:
			LD fbAxisMove0.InVelocity
			OR fbAxisStop0.Done
			AND ( fbAxisMove1.InVelocity
				OR fbAxisStop1.Done
			)
			AND ( fbAxisMove2.InVelocity
				OR fbAxisStop2.Done
			)
			AND ( fbAxisMove3.InVelocity
				OR fbAxisStop3.Done
			)
			AND fbReadStatus0.Valid
			AND ( fbReadStatus0.ContinuousMotion
				OR fbReadStatus0.StandStill
			)
			AND fbReadStatus1.Valid
			AND ( fbReadStatus1.ContinuousMotion
				OR fbReadStatus1.StandStill
			)
			AND fbReadStatus2.Valid
			AND ( fbReadStatus2.ContinuousMotion
				OR fbReadStatus2.StandStill
			)
			AND fbReadStatus3.Valid
			AND ( fbReadStatus3.ContinuousMotion
				OR fbReadStatus3.StandStill
			)
			JMPCN ODK_SKIP_00000000000000P_000000000000005

				(* elsif - Stmts *)

(** 				 **)
(** 		oExecuteAxisMove := FALSE; **)
				(* assign - Stmt *)
				LD FALSE
				ST oExecuteAxisMove

(** 	  	eStateMain := MAIN_Read_Velocity;   **)
				(* assign - Stmt *)
				LD MAIN_Read_Velocity
				ST eStateMain

				JMP ODK_END_IF_00000000000000P

(** 	  END_IF; 	 **)
			(* if - End *) 
			ODK_SKIP_00000000000000P_000000000000005:
			ODK_END_IF_00000000000000P:

			JMP ODK_END_IF_00000000000000O

(**  **)
(** ELSIF eStateMain = MAIN_CanError THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000O_000000000000004:
		LD eStateMain
		EQ MAIN_CanError
		JMPCN ODK_SKIP_00000000000000O_000000000000005

			(* elsif - Stmts *)

(**  **)
(** 	fbCanRecover(Execute:=FALSE); **)
			(* call - Stmt *)
			CAL fbCanRecover (
				Execute := FALSE
			)

(** 	eStateMain := MAIN_CanError_loop; **)
			(* assign - Stmt *)
			LD MAIN_CanError_loop
			ST eStateMain

			JMP ODK_END_IF_00000000000000O

(** 	 **)
(** ELSIF eStateMain = MAIN_CanError_loop THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_00000000000000O_000000000000005:
		LD eStateMain
		EQ MAIN_CanError_loop
		JMPCN ODK_SKIP_00000000000000O_000000000000006

			(* elsif - Stmts *)

(**  **)
(** 	fbCanRecover(Execute:=TRUE); **)
			(* call - Stmt *)
			CAL fbCanRecover (
				Execute := TRUE
			)

(** 	IF fbCanRecover.Done THEN **)
			(* if - Cond *)
			LD fbCanRecover.Done
			JMPCN ODK_SKIP_00000000000000Q_000000000000001

				(* then - Stmts *)

(** 		eStateMain:=MAIN_Init; **)
				(* assign - Stmt *)
				LD MAIN_Init
				ST eStateMain

				JMP ODK_END_IF_00000000000000Q

(** 	END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000Q_000000000000001:
			ODK_END_IF_00000000000000Q:

			JMP ODK_END_IF_00000000000000O

(**  **)
(** END_IF;  **)
		(* if - End *) 
		ODK_SKIP_00000000000000O_000000000000006:
		ODK_END_IF_00000000000000O:

		JMP ODK_END_IF_000000000000001

(**  **)
(** END_IF; **)
	(* if - End *) 
	ODK_SKIP_000000000000001_00000000000000I:
	ODK_END_IF_000000000000001:

(**  **)
(**    **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
(**  **)
END_PROGRAM