FUNCTION_BLOCK FB_INITIALIZE
VAR_EXTERNAL
    Axis0 				                    : Axis_REF;                    (* Axis definitions, Node 2, Right_Back Wheel, EPOS controller *)
	Axis1 				                    : Axis_REF;	                   (* Axis definitions, Node 1, Right_Front Wheel, EPOS P controller *)
	Axis2                                   : Axis_REF;                    (* Axis definitions, Node 3, Left_Back Wheel, EPOS controller *)
	Axis3                                   : Axis_REF;	                   (* Axis definitions, Node 4, Left_Front Wheel, EPOS controller *)			   	
END_VAR

VAR_INPUT
	Execute : BOOL;
END_VAR

VAR_OUTPUT
    Done                      : BOOL;
    Error                     : BOOL;
	ErrorID                   : DINT;
END_VAR

VAR
	lastErrorId : DINT :=0;
	internalErrorCounter : UDINT := 0;
	initializationState	: INITIALIZE_STATE;  
	
	fbReadStatus0	: MC_ReadStatus;
	fbReadStatus1	: MC_ReadStatus;
	fbReadStatus2   : MC_ReadStatus;
	fbReadStatus3   : MC_ReadStatus;
	
	
	fbPower0		: MC_Power;
	fbPower1		: MC_Power;
	fbPower2		: MC_Power;
	fbPower3		: MC_Power;
	
	fbAxisStop0		: MC_Stop;
	fbAxisStop1		: MC_Stop;
	fbAxisStop2		: MC_Stop;
	fbAxisStop3		: MC_Stop;
	
	fbReset0		: MC_Reset;
	fbReset1		: MC_Reset;
	fbReset2		: MC_Reset;
	fbReset3		: MC_Reset;
	
	fbCanRecover 	: FB_CanRecover;
	
END_VAR

(*Automatically declared*)
VAR_EXTERNAL
END_VAR
(** IF Execute = FALSE THEN **)
	(* if - Cond *)
	LD Execute
	EQ FALSE
	JMPCN ODK_SKIP_000000000000001_000000000000001

		(* then - Stmts *)

(**  **)
(** 	initializationState := INITIALIZE_Init; **)
		(* assign - Stmt *)
		LD INITIALIZE_Init
		ST initializationState

(** 	Done := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST Done

(** 	Error := FALSE; **)
		(* assign - Stmt *)
		LD FALSE
		ST Error

(** 	ErrorId := 0; **)
		(* assign - Stmt *)
		LD 0
		ST ErrorId

(** 	internalErrorCounter := 0; **)
		(* assign - Stmt *)
		LD 0
		ST internalErrorCounter

		JMP ODK_END_IF_000000000000001

(**  **)
(** ELSE **)
	(* else *) 
	ODK_SKIP_000000000000001_000000000000001:

		(* else - Stmts *)

(**  **)
(** 	IF initializationState = INITIALIZE_Init THEN **)
		(* if - Cond *)
		LD initializationState
		EQ INITIALIZE_Init
		JMPCN ODK_SKIP_000000000000002_000000000000001

			(* then - Stmts *)

(** 	 **)
(** 		IF internalErrorCounter >= 5 THEN **)
			(* if - Cond *)
			LD internalErrorCounter
			GE 5
			JMPCN ODK_SKIP_000000000000003_000000000000001

				(* then - Stmts *)

(** 		 **)
(** 			Error := TRUE; **)
				(* assign - Stmt *)
				LD TRUE
				ST Error

(** 			ErrorId := lastErrorId; **)
				(* assign - Stmt *)
				LD lastErrorId
				ST ErrorId

(** 			Done := FALSE; **)
				(* assign - Stmt *)
				LD FALSE
				ST Done

				JMP ODK_END_IF_000000000000003

(** 		 **)
(** 		ELSE **)
			(* else *) 
			ODK_SKIP_000000000000003_000000000000001:

				(* else - Stmts *)

(**  **)
(** 			{*initialize all controllers to velocity mode, stand still*} **)
(**  **)
(** 			fbReadStatus0(Axis := Axis0 , Enable := TRUE); **)
				(* call - Stmt *)
				CAL fbReadStatus0 (
					Axis := Axis0,
					Enable := TRUE
				)

(** 			fbReadStatus1(Axis := Axis1 , Enable := TRUE); **)
				(* call - Stmt *)
				CAL fbReadStatus1 (
					Axis := Axis1,
					Enable := TRUE
				)

(** 			fbReadStatus2(Axis := Axis2 , Enable := TRUE); **)
				(* call - Stmt *)
				CAL fbReadStatus2 (
					Axis := Axis2,
					Enable := TRUE
				)

(** 			fbReadStatus3(Axis := Axis3 , Enable := TRUE); **)
				(* call - Stmt *)
				CAL fbReadStatus3 (
					Axis := Axis3,
					Enable := TRUE
				)

(** 	 **)
(** 			IF fbReadStatus0.Error OR fbReadStatus1.Error OR fbReadStatus2.Error OR fbReadStatus3.Error THEN **)
				(* if - Cond *)
				LD fbReadStatus0.Error
				OR fbReadStatus1.Error
				OR fbReadStatus2.Error
				OR fbReadStatus3.Error
				JMPCN ODK_SKIP_000000000000004_000000000000001

					(* then - Stmts *)

(**  **)
(** 				{*cannot read the state of 1 or 2 or 3 or 4 controllers*} **)
(** 				{*go to state canError to check for errors*} **)
(**  **)
(** 				{*initializationState := MAIN_CanError;*} **)
(** 				initializationState := INITIALIZE_CanError; **)
					(* assign - Stmt *)
					LD INITIALIZE_CanError
					ST initializationState

					JMP ODK_END_IF_000000000000004

(** 	 **)
(** 			ELSIF fbReadStatus0.Valid AND fbReadStatus1.Valid AND fbReadStatus2.Valid AND fbReadStatus3.Valid THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000004_000000000000001:
				LD fbReadStatus0.Valid
				AND fbReadStatus1.Valid
				AND fbReadStatus2.Valid
				AND fbReadStatus3.Valid
				JMPCN ODK_SKIP_000000000000004_000000000000002

					(* elsif - Stmts *)

(** 	 **)
(** 				{*function blocks fbReadStatus0 or 1 or 2 or 3 have updated their values*} **)
(** 				IF fbReadStatus0.Disabled AND fbReadStatus1.Disabled AND fbReadStatus2.Disabled AND fbReadStatus3.Disabled THEN **)
					(* if - Cond *)
					LD fbReadStatus0.Disabled
					AND fbReadStatus1.Disabled
					AND fbReadStatus2.Disabled
					AND fbReadStatus3.Disabled
					JMPCN ODK_SKIP_000000000000005_000000000000001

						(* then - Stmts *)

(** 			 **)
(** 					{*all controllers are disabled*} **)
(** 					{*switch to state INITIALIZE_PowerOn to enable them*} **)
(** 					initializationState := INITIALIZE_PowerOn; **)
						(* assign - Stmt *)
						LD INITIALIZE_PowerOn
						ST initializationState

						JMP ODK_END_IF_000000000000005

(** 			 **)
(** 				ELSIF NOT fbReadStatus0.Disabled THEN **)
					(* elseif - Cond *) 
					ODK_SKIP_000000000000005_000000000000001:
					LD fbReadStatus0.Disabled
					NOT
					JMPCN ODK_SKIP_000000000000005_000000000000002

						(* elsif - Stmts *)

(** 		 **)
(** 					{*axis 0 - EPOS controller - Node 2 - right_back motor is not disabled*} **)
(** 					{*switch to state INITIALIZE_CheckAxis0 to disable it*} **)
(** 		 **)
(** 					initializationState := INITIALIZE_CheckAxis0; **)
						(* assign - Stmt *)
						LD INITIALIZE_CheckAxis0
						ST initializationState

						JMP ODK_END_IF_000000000000005

(**  **)
(** 				ELSIF NOT fbReadStatus1.Disabled THEN **)
					(* elseif - Cond *) 
					ODK_SKIP_000000000000005_000000000000002:
					LD fbReadStatus1.Disabled
					NOT
					JMPCN ODK_SKIP_000000000000005_000000000000003

						(* elsif - Stmts *)

(**  **)
(** 					{*axis 1 - EPOS P controller - Node 1 - right_front motor is not disabled*} **)
(** 					{*switch to state INITIALIZE_CheckAxis1 to disable it*} **)
(** 	 **)
(** 					initializationState := INITIALIZE_CheckAxis1; **)
						(* assign - Stmt *)
						LD INITIALIZE_CheckAxis1
						ST initializationState

						JMP ODK_END_IF_000000000000005

(** 					 **)
(** 				ELSIF NOT fbReadStatus2.Disabled THEN **)
					(* elseif - Cond *) 
					ODK_SKIP_000000000000005_000000000000003:
					LD fbReadStatus2.Disabled
					NOT
					JMPCN ODK_SKIP_000000000000005_000000000000004

						(* elsif - Stmts *)

(** 		 **)
(** 					{*axis 2 - EPOS controller - Node 3 - left_back motor is not disabled*} **)
(** 					{*switch to state INITIALIZE_CheckAxis2 to disable it*} **)
(** 		 **)
(** 					initializationState := INITIALIZE_CheckAxis2; **)
						(* assign - Stmt *)
						LD INITIALIZE_CheckAxis2
						ST initializationState

						JMP ODK_END_IF_000000000000005

(**  **)
(** 				ELSIF NOT fbReadStatus3.Disabled THEN **)
					(* elseif - Cond *) 
					ODK_SKIP_000000000000005_000000000000004:
					LD fbReadStatus3.Disabled
					NOT
					JMPCN ODK_SKIP_000000000000005_000000000000005

						(* elsif - Stmts *)

(**  **)
(** 					{*axis 3 - EPOS controller - Node 4 - left_front motor is not disabled*} **)
(** 					{*switch to state INITIALIZE_CheckAxis3 to disable it*} **)
(** 	 **)
(** 					initializationState := INITIALIZE_CheckAxis3; **)
						(* assign - Stmt *)
						LD INITIALIZE_CheckAxis3
						ST initializationState

						JMP ODK_END_IF_000000000000005

(**  **)
(** 				END_IF; **)
					(* if - End *) 
					ODK_SKIP_000000000000005_000000000000005:
					ODK_END_IF_000000000000005:

					JMP ODK_END_IF_000000000000004

(** 		 **)
(** 			ELSE **)
				(* else *) 
				ODK_SKIP_000000000000004_000000000000002:

					(* else - Stmts *)

(** 	 **)
(** 			    {*the fbReadStatus0 or1 or 2 or 3 blocks have not updated their values yet*} **)
(** 				{*continue calling them with enable:=TRUE until they do*} **)
(** 				{*no need to change state*} **)
(** 				; **)
(**  **)
(** 			END_IF; **)
				(* if - End *) 
				ODK_END_IF_000000000000004:

(**  **)
(** 		END_IF; **)
			(* if - End *) 
			ODK_END_IF_000000000000003:

			JMP ODK_END_IF_000000000000002

(**  **)
(** 	ELSIF initializationState = INITIALIZE_CheckAxis0 THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_000000000000001:
		LD initializationState
		EQ INITIALIZE_CheckAxis0
		JMPCN ODK_SKIP_000000000000002_000000000000002

			(* elsif - Stmts *)

(**  **)
(** 		{*check the state of Axis0*} **)
(** 		{*after the sequence completes the axis will be in the disabled state*} **)
(** 		{*control is transfered to state INITIALIZE_Init that will start the enable sequence*} **)
(**  **)
(** 	    fbReadStatus0(Axis := Axis0 , Enable := TRUE); **)
			(* call - Stmt *)
			CAL fbReadStatus0 (
				Axis := Axis0,
				Enable := TRUE
			)

(**  **)
(** 		IF fbReadStatus0.Error THEN **)
			(* if - Cond *)
			LD fbReadStatus0.Error
			JMPCN ODK_SKIP_000000000000006_000000000000001

				(* then - Stmts *)

(** 	 **)
(** 			{*cannot read the status of axis0*} **)
(** 			{*axis0 is an EPOS controller connected on the CAN bus*} **)
(** 			{*maybe there is a CAN communication error, switch to state MAIN_CanError*} **)
(** 			{*initializationState := MAIN_CanError;*} **)
(** 			initializationState := INITIALIZE_CanError; **)
				(* assign - Stmt *)
				LD INITIALIZE_CanError
				ST initializationState

				JMP ODK_END_IF_000000000000006

(** 		 **)
(** 		ELSIF fbReadStatus0.Valid THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_000000000000006_000000000000001:
			LD fbReadStatus0.Valid
			JMPCN ODK_SKIP_000000000000006_000000000000002

				(* elsif - Stmts *)

(** 	 **)
(** 			{*we have read the status of axis0*} **)
(** 	 **)
(** 			IF fbReadStatus0.Errorstop THEN **)
				(* if - Cond *)
				LD fbReadStatus0.Errorstop
				JMPCN ODK_SKIP_000000000000007_000000000000001

					(* then - Stmts *)

(** 				{*the motor is in an error state*} **)
(** 				{*call the MC_Reset function block to reset it*} **)
(** 				initializationState := INITIALIZE_Reset0; **)
					(* assign - Stmt *)
					LD INITIALIZE_Reset0
					ST initializationState

					JMP ODK_END_IF_000000000000007

(** 			ELSIF fbReadStatus0.Disabled THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000007_000000000000001:
				LD fbReadStatus0.Disabled
				JMPCN ODK_SKIP_000000000000007_000000000000002

					(* elsif - Stmts *)

(** 				{*the motor is in the disabled state, nothing to do*} **)
(** 				{*switch to MAIN_Init*} **)
(** 				initializationState := INITIALIZE_Init; **)
					(* assign - Stmt *)
					LD INITIALIZE_Init
					ST initializationState

					JMP ODK_END_IF_000000000000007

(** 			ELSIF fbReadStatus0.Stopping THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000007_000000000000002:
				LD fbReadStatus0.Stopping
				JMPCN ODK_SKIP_000000000000007_000000000000003

					(* elsif - Stmts *)

(** 				{*the motor is stopping*} **)
(** 				{*although we could simply wait, force the stop*} **)
(** 				{*i.e. greater decceleration*} **)
(** 				initializationState := INITIALIZE_Reset0; **)
					(* assign - Stmt *)
					LD INITIALIZE_Reset0
					ST initializationState

					JMP ODK_END_IF_000000000000007

(** 			ELSIF fbReadStatus0.StandStill THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000007_000000000000003:
				LD fbReadStatus0.StandStill
				JMPCN ODK_SKIP_000000000000007_000000000000004

					(* elsif - Stmts *)

(** 				{*the controller is not in an error state but it is enabled*} **)
(** 				{*power off all controllers*} **)
(** 				initializationState := INITIALIZE_PowerOff; **)
					(* assign - Stmt *)
					LD INITIALIZE_PowerOff
					ST initializationState

					JMP ODK_END_IF_000000000000007

(** 			ELSIF fbReadStatus0.DiscreteMotion THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000007_000000000000004:
				LD fbReadStatus0.DiscreteMotion
				JMPCN ODK_SKIP_000000000000007_000000000000005

					(* elsif - Stmts *)

(** 				{*i.e. position control*} **)
(** 				{*stop motion on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop; **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_000000000000007

(** 			ELSIF fbReadStatus0.ContinuousMotion THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000007_000000000000005:
				LD fbReadStatus0.ContinuousMotion
				JMPCN ODK_SKIP_000000000000007_000000000000006

					(* elsif - Stmts *)

(** 				{*i.e. velocity control*} **)
(** 				{*stop motion on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop;		 **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_000000000000007

(** 			ELSIF fbReadStatus0.Homing THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000007_000000000000006:
				LD fbReadStatus0.Homing
				JMPCN ODK_SKIP_000000000000007_000000000000007

					(* elsif - Stmts *)

(** 				{*stop homing on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop; **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_000000000000007

(** 			END_IF; **)
				(* if - End *) 
				ODK_SKIP_000000000000007_000000000000007:
				ODK_END_IF_000000000000007:

				JMP ODK_END_IF_000000000000006

(** 		ELSE **)
			(* else *) 
			ODK_SKIP_000000000000006_000000000000002:

				(* else - Stmts *)

(** 			{*status not updated yet*} **)
(** 			; **)
(** 		END_IF; **)
			(* if - End *) 
			ODK_END_IF_000000000000006:

			JMP ODK_END_IF_000000000000002

(**  **)
(** 	ELSIF initializationState = INITIALIZE_CheckAxis1 THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_000000000000002:
		LD initializationState
		EQ INITIALIZE_CheckAxis1
		JMPCN ODK_SKIP_000000000000002_000000000000003

			(* elsif - Stmts *)

(**  **)
(** 		{*check the state of Axis1*} **)
(** 		{*after the sequence completes the axis will be in the disabled state*} **)
(** 		{*control is transfered to state MAIN_Init that will start the enable sequence*} **)
(**  **)
(** 	    fbReadStatus1(Axis := Axis1 , Enable := TRUE); **)
			(* call - Stmt *)
			CAL fbReadStatus1 (
				Axis := Axis1,
				Enable := TRUE
			)

(**  **)
(** 		IF fbReadStatus1.Error THEN **)
			(* if - Cond *)
			LD fbReadStatus1.Error
			JMPCN ODK_SKIP_000000000000008_000000000000001

				(* then - Stmts *)

(** 	 **)
(** 			{*this is wierd*} **)
(** 			{*there is no reason why we cannot read our own status*} **)
(** 			{*axis1 is the EPOS P controller*} **)
(** 			{*simply increment the internal error counter and try again*} **)
(** 			lastErrorId := fbReadStatus1.ErrorId; **)
				(* assign - Stmt *)
				LD fbReadStatus1.ErrorId
				ST lastErrorId

(** 			internalErrorCounter := internalErrorCounter + 1; **)
				(* assign - Stmt *)
				LD internalErrorCounter
				ADD 1
				ST internalErrorCounter

(** 			initializationState := INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_000000000000008

(** 		 **)
(** 		ELSIF fbReadStatus1.Valid THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_000000000000008_000000000000001:
			LD fbReadStatus1.Valid
			JMPCN ODK_SKIP_000000000000008_000000000000002

				(* elsif - Stmts *)

(** 			{*we have read the status of axis1*} **)
(** 	 **)
(** 			IF fbReadStatus1.Errorstop THEN **)
				(* if - Cond *)
				LD fbReadStatus1.Errorstop
				JMPCN ODK_SKIP_000000000000009_000000000000001

					(* then - Stmts *)

(** 				{*the motor is in an error state*} **)
(** 				{*call the MC_Reset function block to reset it*} **)
(** 				initializationState := INITIALIZE_Reset1; **)
					(* assign - Stmt *)
					LD INITIALIZE_Reset1
					ST initializationState

					JMP ODK_END_IF_000000000000009

(** 			ELSIF fbReadStatus1.Disabled THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000009_000000000000001:
				LD fbReadStatus1.Disabled
				JMPCN ODK_SKIP_000000000000009_000000000000002

					(* elsif - Stmts *)

(** 				{*the motor is in the disabled state, nothing to do*} **)
(** 				{*switch to MAIN_Init*} **)
(** 				initializationState := INITIALIZE_Init; **)
					(* assign - Stmt *)
					LD INITIALIZE_Init
					ST initializationState

					JMP ODK_END_IF_000000000000009

(** 			ELSIF fbReadStatus1.Stopping THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000009_000000000000002:
				LD fbReadStatus1.Stopping
				JMPCN ODK_SKIP_000000000000009_000000000000003

					(* elsif - Stmts *)

(** 				{*the motor is stopping*} **)
(** 				{*although we could simply wait, force the stop*} **)
(** 				{*i.e. greater decceleration*} **)
(** 				initializationState := INITIALIZE_Reset1; **)
					(* assign - Stmt *)
					LD INITIALIZE_Reset1
					ST initializationState

					JMP ODK_END_IF_000000000000009

(** 			ELSIF fbReadStatus1.StandStill THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000009_000000000000003:
				LD fbReadStatus1.StandStill
				JMPCN ODK_SKIP_000000000000009_000000000000004

					(* elsif - Stmts *)

(** 				{*the controller is not in an error state but it is enabled*} **)
(** 				{*power off all controllers*} **)
(** 				initializationState := INITIALIZE_PowerOff; **)
					(* assign - Stmt *)
					LD INITIALIZE_PowerOff
					ST initializationState

					JMP ODK_END_IF_000000000000009

(** 			ELSIF fbReadStatus1.DiscreteMotion THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000009_000000000000004:
				LD fbReadStatus1.DiscreteMotion
				JMPCN ODK_SKIP_000000000000009_000000000000005

					(* elsif - Stmts *)

(** 				{*i.e. position control*} **)
(** 				{*stop motion on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop; **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_000000000000009

(** 			ELSIF fbReadStatus1.ContinuousMotion THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000009_000000000000005:
				LD fbReadStatus1.ContinuousMotion
				JMPCN ODK_SKIP_000000000000009_000000000000006

					(* elsif - Stmts *)

(** 				{*i.e. velocity control*} **)
(** 				{*stop motion on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop;		 **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_000000000000009

(** 			ELSIF fbReadStatus1.Homing THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_000000000000009_000000000000006:
				LD fbReadStatus1.Homing
				JMPCN ODK_SKIP_000000000000009_000000000000007

					(* elsif - Stmts *)

(** 				{*stop homing on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop; **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_000000000000009

(** 			END_IF; **)
				(* if - End *) 
				ODK_SKIP_000000000000009_000000000000007:
				ODK_END_IF_000000000000009:

				JMP ODK_END_IF_000000000000008

(** 		ELSE **)
			(* else *) 
			ODK_SKIP_000000000000008_000000000000002:

				(* else - Stmts *)

(** 			{*status not updated yet*} **)
(** 			; **)
(** 		END_IF; **)
			(* if - End *) 
			ODK_END_IF_000000000000008:

			JMP ODK_END_IF_000000000000002

(** 		 **)
(** 	ELSIF initializationState = INITIALIZE_CheckAxis2 THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_000000000000003:
		LD initializationState
		EQ INITIALIZE_CheckAxis2
		JMPCN ODK_SKIP_000000000000002_000000000000004

			(* elsif - Stmts *)

(**  **)
(** 		{*check the state of Axis2*} **)
(** 		{*after the sequence completes the axis will be in the disabled state*} **)
(** 		{*control is transfered to state INITIALIZE_Init that will start the enable sequence*} **)
(**  **)
(** 	    fbReadStatus0(Axis := Axis2 , Enable := TRUE); **)
			(* call - Stmt *)
			CAL fbReadStatus0 (
				Axis := Axis2,
				Enable := TRUE
			)

(**  **)
(** 		IF fbReadStatus2.Error THEN **)
			(* if - Cond *)
			LD fbReadStatus2.Error
			JMPCN ODK_SKIP_00000000000000A_000000000000001

				(* then - Stmts *)

(** 	 **)
(** 			{*cannot read the status of axis2*} **)
(** 			{*axis2 is an EPOS controller connected on the CAN bus*} **)
(** 			{*maybe there is a CAN communication error, switch to state MAIN_CanError*} **)
(** 			{*initializationState := MAIN_CanError;*} **)
(** 			initializationState := INITIALIZE_CanError; **)
				(* assign - Stmt *)
				LD INITIALIZE_CanError
				ST initializationState

				JMP ODK_END_IF_00000000000000A

(** 		 **)
(** 		ELSIF fbReadStatus2.Valid THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000A_000000000000001:
			LD fbReadStatus2.Valid
			JMPCN ODK_SKIP_00000000000000A_000000000000002

				(* elsif - Stmts *)

(** 	 **)
(** 			{*we have read the status of axis2*} **)
(** 	 **)
(** 			IF fbReadStatus2.Errorstop THEN **)
				(* if - Cond *)
				LD fbReadStatus2.Errorstop
				JMPCN ODK_SKIP_00000000000000B_000000000000001

					(* then - Stmts *)

(** 				{*the motor is in an error state*} **)
(** 				{*call the MC_Reset function block to reset it*} **)
(** 				initializationState := INITIALIZE_Reset2; **)
					(* assign - Stmt *)
					LD INITIALIZE_Reset2
					ST initializationState

					JMP ODK_END_IF_00000000000000B

(** 			ELSIF fbReadStatus2.Disabled THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000B_000000000000001:
				LD fbReadStatus2.Disabled
				JMPCN ODK_SKIP_00000000000000B_000000000000002

					(* elsif - Stmts *)

(** 				{*the motor is in the disabled state, nothing to do*} **)
(** 				{*switch to MAIN_Init*} **)
(** 				initializationState := INITIALIZE_Init; **)
					(* assign - Stmt *)
					LD INITIALIZE_Init
					ST initializationState

					JMP ODK_END_IF_00000000000000B

(** 			ELSIF fbReadStatus2.Stopping THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000B_000000000000002:
				LD fbReadStatus2.Stopping
				JMPCN ODK_SKIP_00000000000000B_000000000000003

					(* elsif - Stmts *)

(** 				{*the motor is stopping*} **)
(** 				{*although we could simply wait, force the stop*} **)
(** 				{*i.e. greater decceleration*} **)
(** 				initializationState := INITIALIZE_Reset0; **)
					(* assign - Stmt *)
					LD INITIALIZE_Reset0
					ST initializationState

					JMP ODK_END_IF_00000000000000B

(** 			ELSIF fbReadStatus2.StandStill THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000B_000000000000003:
				LD fbReadStatus2.StandStill
				JMPCN ODK_SKIP_00000000000000B_000000000000004

					(* elsif - Stmts *)

(** 				{*the controller is not in an error state but it is enabled*} **)
(** 				{*power off all controllers*} **)
(** 				initializationState := INITIALIZE_PowerOff; **)
					(* assign - Stmt *)
					LD INITIALIZE_PowerOff
					ST initializationState

					JMP ODK_END_IF_00000000000000B

(** 			ELSIF fbReadStatus2.DiscreteMotion THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000B_000000000000004:
				LD fbReadStatus2.DiscreteMotion
				JMPCN ODK_SKIP_00000000000000B_000000000000005

					(* elsif - Stmts *)

(** 				{*i.e. position control*} **)
(** 				{*stop motion on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop; **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_00000000000000B

(** 			ELSIF fbReadStatus2.ContinuousMotion THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000B_000000000000005:
				LD fbReadStatus2.ContinuousMotion
				JMPCN ODK_SKIP_00000000000000B_000000000000006

					(* elsif - Stmts *)

(** 				{*i.e. velocity control*} **)
(** 				{*stop motion on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop;		 **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_00000000000000B

(** 			ELSIF fbReadStatus2.Homing THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000B_000000000000006:
				LD fbReadStatus2.Homing
				JMPCN ODK_SKIP_00000000000000B_000000000000007

					(* elsif - Stmts *)

(** 				{*stop homing on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop; **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_00000000000000B

(** 			END_IF; **)
				(* if - End *) 
				ODK_SKIP_00000000000000B_000000000000007:
				ODK_END_IF_00000000000000B:

				JMP ODK_END_IF_00000000000000A

(** 		ELSE **)
			(* else *) 
			ODK_SKIP_00000000000000A_000000000000002:

				(* else - Stmts *)

(** 			{*status not updated yet*} **)
(** 			; **)
(** 		END_IF; **)
			(* if - End *) 
			ODK_END_IF_00000000000000A:

			JMP ODK_END_IF_000000000000002

(** 		 **)
(** 	ELSIF initializationState = INITIALIZE_CheckAxis3 THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_000000000000004:
		LD initializationState
		EQ INITIALIZE_CheckAxis3
		JMPCN ODK_SKIP_000000000000002_000000000000005

			(* elsif - Stmts *)

(**  **)
(** 		{*check the state of Axis3*} **)
(** 		{*after the sequence completes the axis will be in the disabled state*} **)
(** 		{*control is transfered to state INITIALIZE_Init that will start the enable sequence*} **)
(**  **)
(** 	    fbReadStatus3(Axis := Axis3 , Enable := TRUE); **)
			(* call - Stmt *)
			CAL fbReadStatus3 (
				Axis := Axis3,
				Enable := TRUE
			)

(**  **)
(** 		IF fbReadStatus3.Error THEN **)
			(* if - Cond *)
			LD fbReadStatus3.Error
			JMPCN ODK_SKIP_00000000000000C_000000000000001

				(* then - Stmts *)

(** 	 **)
(** 			{*cannot read the status of axis3*} **)
(** 			{*axis3 is an EPOS controller connected on the CAN bus*} **)
(** 			{*maybe there is a CAN communication error, switch to state MAIN_CanError*} **)
(** 			{*initializationState := MAIN_CanError;*} **)
(** 			initializationState := INITIALIZE_CanError; **)
				(* assign - Stmt *)
				LD INITIALIZE_CanError
				ST initializationState

				JMP ODK_END_IF_00000000000000C

(** 		 **)
(** 		ELSIF fbReadStatus3.Valid THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000C_000000000000001:
			LD fbReadStatus3.Valid
			JMPCN ODK_SKIP_00000000000000C_000000000000002

				(* elsif - Stmts *)

(** 	 **)
(** 			{*we have read the status of axis3*} **)
(** 	 **)
(** 			IF fbReadStatus3.Errorstop THEN **)
				(* if - Cond *)
				LD fbReadStatus3.Errorstop
				JMPCN ODK_SKIP_00000000000000D_000000000000001

					(* then - Stmts *)

(** 				{*the motor is in an error state*} **)
(** 				{*call the MC_Reset function block to reset it*} **)
(** 				initializationState := INITIALIZE_Reset3; **)
					(* assign - Stmt *)
					LD INITIALIZE_Reset3
					ST initializationState

					JMP ODK_END_IF_00000000000000D

(** 			ELSIF fbReadStatus3.Disabled THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000D_000000000000001:
				LD fbReadStatus3.Disabled
				JMPCN ODK_SKIP_00000000000000D_000000000000002

					(* elsif - Stmts *)

(** 				{*the motor is in the disabled state, nothing to do*} **)
(** 				{*switch to MAIN_Init*} **)
(** 				initializationState := INITIALIZE_Init; **)
					(* assign - Stmt *)
					LD INITIALIZE_Init
					ST initializationState

					JMP ODK_END_IF_00000000000000D

(** 			ELSIF fbReadStatus3.Stopping THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000D_000000000000002:
				LD fbReadStatus3.Stopping
				JMPCN ODK_SKIP_00000000000000D_000000000000003

					(* elsif - Stmts *)

(** 				{*the motor is stopping*} **)
(** 				{*although we could simply wait, force the stop*} **)
(** 				{*i.e. greater decceleration*} **)
(** 				initializationState := INITIALIZE_Reset3; **)
					(* assign - Stmt *)
					LD INITIALIZE_Reset3
					ST initializationState

					JMP ODK_END_IF_00000000000000D

(** 			ELSIF fbReadStatus3.StandStill THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000D_000000000000003:
				LD fbReadStatus3.StandStill
				JMPCN ODK_SKIP_00000000000000D_000000000000004

					(* elsif - Stmts *)

(** 				{*the controller is not in an error state but it is enabled*} **)
(** 				{*power off all controllers*} **)
(** 				initializationState := INITIALIZE_PowerOff; **)
					(* assign - Stmt *)
					LD INITIALIZE_PowerOff
					ST initializationState

					JMP ODK_END_IF_00000000000000D

(** 			ELSIF fbReadStatus3.DiscreteMotion THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000D_000000000000004:
				LD fbReadStatus3.DiscreteMotion
				JMPCN ODK_SKIP_00000000000000D_000000000000005

					(* elsif - Stmts *)

(** 				{*i.e. position control*} **)
(** 				{*stop motion on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop; **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_00000000000000D

(** 			ELSIF fbReadStatus3.ContinuousMotion THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000D_000000000000005:
				LD fbReadStatus3.ContinuousMotion
				JMPCN ODK_SKIP_00000000000000D_000000000000006

					(* elsif - Stmts *)

(** 				{*i.e. velocity control*} **)
(** 				{*stop motion on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop;		 **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_00000000000000D

(** 			ELSIF fbReadStatus3.Homing THEN **)
				(* elseif - Cond *) 
				ODK_SKIP_00000000000000D_000000000000006:
				LD fbReadStatus3.Homing
				JMPCN ODK_SKIP_00000000000000D_000000000000007

					(* elsif - Stmts *)

(** 				{*stop homing on all controllers*} **)
(** 				initializationState := INITIALIZE_Stop; **)
					(* assign - Stmt *)
					LD INITIALIZE_Stop
					ST initializationState

					JMP ODK_END_IF_00000000000000D

(** 			END_IF; **)
				(* if - End *) 
				ODK_SKIP_00000000000000D_000000000000007:
				ODK_END_IF_00000000000000D:

				JMP ODK_END_IF_00000000000000C

(** 		ELSE **)
			(* else *) 
			ODK_SKIP_00000000000000C_000000000000002:

				(* else - Stmts *)

(** 			{*status not updated yet*} **)
(** 			; **)
(** 		END_IF; **)
			(* if - End *) 
			ODK_END_IF_00000000000000C:

			JMP ODK_END_IF_000000000000002

(**  **)
(** 	ELSIF initializationState = INITIALIZE_PowerOff THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_000000000000005:
		LD initializationState
		EQ INITIALIZE_PowerOff
		JMPCN ODK_SKIP_000000000000002_000000000000006

			(* elsif - Stmts *)

(**  **)
(** 		{*Disable power on all controllers*} **)
(** 		fbPower0(Axis := Axis0 , Enable := FALSE); **)
			(* call - Stmt *)
			CAL fbPower0 (
				Axis := Axis0,
				Enable := FALSE
			)

(** 		fbPower1(Axis := Axis1 , Enable := FALSE); **)
			(* call - Stmt *)
			CAL fbPower1 (
				Axis := Axis1,
				Enable := FALSE
			)

(** 		fbPower2(Axis := Axis2 , Enable := FALSE); **)
			(* call - Stmt *)
			CAL fbPower2 (
				Axis := Axis2,
				Enable := FALSE
			)

(** 		fbPower3(Axis := Axis3 , Enable := FALSE); **)
			(* call - Stmt *)
			CAL fbPower3 (
				Axis := Axis3,
				Enable := FALSE
			)

(**  **)
(** 		{*Switch state when all controllers are disabled*} **)
(** 		IF fbPower0.Error OR fbPower1.Error OR fbPower2.Error OR fbPower3.Error THEN **)
			(* if - Cond *)
			LD fbPower0.Error
			OR fbPower1.Error
			OR fbPower2.Error
			OR fbPower3.Error
			JMPCN ODK_SKIP_00000000000000E_000000000000001

				(* then - Stmts *)

(** 	 **)
(** 			initializationState := INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000E

(** 	 **)
(** 		ELSIF ( NOT fbPower0.Status ) AND ( NOT fbPower1.Status ) AND ( NOT fbPower2.Status ) AND ( NOT fbPower3.Status ) THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000E_000000000000001:
			LD fbPower0.Status
			NOT
			AND ( fbPower1.Status
				NOT
			)
			AND ( fbPower2.Status
				NOT
			)
			AND ( fbPower3.Status
				NOT
			)
			JMPCN ODK_SKIP_00000000000000E_000000000000002

				(* elsif - Stmts *)

(** 			{*all controllers are disabled, switch to the next state*} **)
(** 			initializationState := INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000E

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000E_000000000000002:
			ODK_END_IF_00000000000000E:

			JMP ODK_END_IF_000000000000002

(**  **)
(** 	ELSIF initializationState = INITIALIZE_Reset0 THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_000000000000006:
		LD initializationState
		EQ INITIALIZE_Reset0
		JMPCN ODK_SKIP_000000000000002_000000000000007

			(* elsif - Stmts *)

(**  **)
(** 		{*reset axis0*} **)
(**  **)
(** 		fbReset0(Axis := Axis0 , Execute := FALSE); **)
			(* call - Stmt *)
			CAL fbReset0 (
				Axis := Axis0,
				Execute := FALSE
			)

(** 		initializationState := INITIALIZE_Reset0_loop; **)
			(* assign - Stmt *)
			LD INITIALIZE_Reset0_loop
			ST initializationState

			JMP ODK_END_IF_000000000000002

(**  **)
(** 	ELSIF initializationState = INITIALIZE_Reset0_loop THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_000000000000007:
		LD initializationState
		EQ INITIALIZE_Reset0_loop
		JMPCN ODK_SKIP_000000000000002_000000000000008

			(* elsif - Stmts *)

(**  **)
(** 		fbReset0(Axis := Axis0 , Execute := TRUE); **)
			(* call - Stmt *)
			CAL fbReset0 (
				Axis := Axis0,
				Execute := TRUE
			)

(** 	 **)
(** 		IF fbReset0.ERROR THEN **)
			(* if - Cond *)
			LD fbReset0.Error
			JMPCN ODK_SKIP_00000000000000F_000000000000001

				(* then - Stmts *)

(** 			{*check for can communication errors*} **)
(** 			{*initializationState := MAIN_CanError;*} **)
(** 			initializationState := INITIALIZE_CanError; **)
				(* assign - Stmt *)
				LD INITIALIZE_CanError
				ST initializationState

				JMP ODK_END_IF_00000000000000F

(** 			; **)
(** 		ELSIF fbReset0.DONE THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000F_000000000000001:
			LD fbReset0.Done
			JMPCN ODK_SKIP_00000000000000F_000000000000002

				(* elsif - Stmts *)

(** 			{*done reseting*} **)
(** 			initializationState := INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000F

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000F_000000000000002:
			ODK_END_IF_00000000000000F:

			JMP ODK_END_IF_000000000000002

(**  **)
(** 	ELSIF initializationState = INITIALIZE_Reset1 THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_000000000000008:
		LD initializationState
		EQ INITIALIZE_Reset1
		JMPCN ODK_SKIP_000000000000002_000000000000009

			(* elsif - Stmts *)

(**  **)
(** 		{*reset axis1*} **)
(**  **)
(** 		fbReset1(Axis := Axis1 , Execute := FALSE); **)
			(* call - Stmt *)
			CAL fbReset1 (
				Axis := Axis1,
				Execute := FALSE
			)

(** 		initializationState := INITIALIZE_Reset1_loop; **)
			(* assign - Stmt *)
			LD INITIALIZE_Reset1_loop
			ST initializationState

			JMP ODK_END_IF_000000000000002

(**  **)
(** 	ELSIF initializationState = INITIALIZE_Reset1_loop THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_000000000000009:
		LD initializationState
		EQ INITIALIZE_Reset1_loop
		JMPCN ODK_SKIP_000000000000002_00000000000000A

			(* elsif - Stmts *)

(**  **)
(** 		fbReset1(Axis := Axis1 , Execute := TRUE); **)
			(* call - Stmt *)
			CAL fbReset1 (
				Axis := Axis1,
				Execute := TRUE
			)

(** 	 **)
(** 		IF fbReset1.ERROR THEN **)
			(* if - Cond *)
			LD fbReset1.Error
			JMPCN ODK_SKIP_00000000000000G_000000000000001

				(* then - Stmts *)

(** 	 **)
(** 			{*this is wierd*} **)
(** 			{*there is no reason why we cannot reset our controller*} **)
(** 			{*axis1 is the EPOS P controller*} **)
(** 			{*simply increment the internal error counter and try again*} **)
(** 			internalErrorCounter := internalErrorCounter + 1; **)
				(* assign - Stmt *)
				LD internalErrorCounter
				ADD 1
				ST internalErrorCounter

(** 			initializationState := INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000G

(** 		 **)
(** 		ELSIF fbReset1.DONE THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000G_000000000000001:
			LD fbReset1.Done
			JMPCN ODK_SKIP_00000000000000G_000000000000002

				(* elsif - Stmts *)

(** 			{*done reseting*} **)
(** 			initializationState := INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000G

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000G_000000000000002:
			ODK_END_IF_00000000000000G:

			JMP ODK_END_IF_000000000000002

(** 		 **)
(** 		ELSIF initializationState = INITIALIZE_Reset2 THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_00000000000000A:
		LD initializationState
		EQ INITIALIZE_Reset2
		JMPCN ODK_SKIP_000000000000002_00000000000000B

			(* elsif - Stmts *)

(**  **)
(** 		{*reset axis2*} **)
(**  **)
(** 		fbReset2(Axis := Axis2 , Execute := FALSE); **)
			(* call - Stmt *)
			CAL fbReset2 (
				Axis := Axis2,
				Execute := FALSE
			)

(** 		initializationState := INITIALIZE_Reset2_loop; **)
			(* assign - Stmt *)
			LD INITIALIZE_Reset2_loop
			ST initializationState

			JMP ODK_END_IF_000000000000002

(**  **)
(** 	ELSIF initializationState = INITIALIZE_Reset2_loop THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_00000000000000B:
		LD initializationState
		EQ INITIALIZE_Reset2_loop
		JMPCN ODK_SKIP_000000000000002_00000000000000C

			(* elsif - Stmts *)

(**  **)
(** 		fbReset2(Axis := Axis2 , Execute := TRUE); **)
			(* call - Stmt *)
			CAL fbReset2 (
				Axis := Axis2,
				Execute := TRUE
			)

(** 	 **)
(** 		IF fbReset2.ERROR THEN **)
			(* if - Cond *)
			LD fbReset2.Error
			JMPCN ODK_SKIP_00000000000000H_000000000000001

				(* then - Stmts *)

(** 			{*check for can communication errors*} **)
(** 			{*initializationState := MAIN_CanError;*} **)
(** 			initializationState := INITIALIZE_CanError; **)
				(* assign - Stmt *)
				LD INITIALIZE_CanError
				ST initializationState

				JMP ODK_END_IF_00000000000000H

(** 			; **)
(** 		ELSIF fbReset2.DONE THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000H_000000000000001:
			LD fbReset2.Done
			JMPCN ODK_SKIP_00000000000000H_000000000000002

				(* elsif - Stmts *)

(** 			{*done reseting*} **)
(** 			initializationState := INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000H

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000H_000000000000002:
			ODK_END_IF_00000000000000H:

			JMP ODK_END_IF_000000000000002

(** 	 **)
(** 	ELSIF initializationState = INITIALIZE_Reset3 THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_00000000000000C:
		LD initializationState
		EQ INITIALIZE_Reset3
		JMPCN ODK_SKIP_000000000000002_00000000000000D

			(* elsif - Stmts *)

(**  **)
(** 		{*reset axis3*} **)
(**  **)
(** 		fbReset3(Axis := Axis3 , Execute := FALSE); **)
			(* call - Stmt *)
			CAL fbReset3 (
				Axis := Axis3,
				Execute := FALSE
			)

(** 		initializationState := INITIALIZE_Reset3_loop; **)
			(* assign - Stmt *)
			LD INITIALIZE_Reset3_loop
			ST initializationState

			JMP ODK_END_IF_000000000000002

(** 			 **)
(** 	ELSIF initializationState = INITIALIZE_Reset3_loop THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_00000000000000D:
		LD initializationState
		EQ INITIALIZE_Reset3_loop
		JMPCN ODK_SKIP_000000000000002_00000000000000E

			(* elsif - Stmts *)

(**  **)
(** 		fbReset3(Axis := Axis3 , Execute := TRUE); **)
			(* call - Stmt *)
			CAL fbReset3 (
				Axis := Axis3,
				Execute := TRUE
			)

(** 	 **)
(** 		IF fbReset3.ERROR THEN **)
			(* if - Cond *)
			LD fbReset3.Error
			JMPCN ODK_SKIP_00000000000000I_000000000000001

				(* then - Stmts *)

(** 			{*check for can communication errors*} **)
(** 			{*initializationState := MAIN_CanError;*} **)
(** 			initializationState := INITIALIZE_CanError; **)
				(* assign - Stmt *)
				LD INITIALIZE_CanError
				ST initializationState

				JMP ODK_END_IF_00000000000000I

(** 			; **)
(** 		ELSIF fbReset3.DONE THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000I_000000000000001:
			LD fbReset3.Done
			JMPCN ODK_SKIP_00000000000000I_000000000000002

				(* elsif - Stmts *)

(** 			{*done reseting*} **)
(** 			initializationState := INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000I

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000I_000000000000002:
			ODK_END_IF_00000000000000I:

			JMP ODK_END_IF_000000000000002

(**  **)
(**  **)
(** 	ELSIF initializationState = INITIALIZE_Stop THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_00000000000000E:
		LD initializationState
		EQ INITIALIZE_Stop
		JMPCN ODK_SKIP_000000000000002_00000000000000F

			(* elsif - Stmts *)

(**  **)
(** 		{*stop all axis*} **)
(**  **)
(** 		fbAxisStop0(Axis := Axis0, Execute := FALSE, Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop0 (
				Axis := Axis0,
				Execute := FALSE,
				Deceleration := 10000
			)

(** 		fbAxisStop1(Axis := Axis1, Execute := FALSE, Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop1 (
				Axis := Axis1,
				Execute := FALSE,
				Deceleration := 10000
			)

(** 		fbAxisStop2(Axis := Axis2, Execute := FALSE, Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop2 (
				Axis := Axis2,
				Execute := FALSE,
				Deceleration := 10000
			)

(** 		fbAxisStop3(Axis := Axis3, Execute := FALSE, Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop3 (
				Axis := Axis3,
				Execute := FALSE,
				Deceleration := 10000
			)

(** 		initializationState := INITIALIZE_Stop_loop; **)
			(* assign - Stmt *)
			LD INITIALIZE_Stop_loop
			ST initializationState

			JMP ODK_END_IF_000000000000002

(**  **)
(** 	ELSIF initializationState = INITIALIZE_Stop_loop THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_00000000000000F:
		LD initializationState
		EQ INITIALIZE_Stop_loop
		JMPCN ODK_SKIP_000000000000002_00000000000000G

			(* elsif - Stmts *)

(**  **)
(** 		fbAxisStop0(Axis := Axis0, Execute := TRUE, Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop0 (
				Axis := Axis0,
				Execute := TRUE,
				Deceleration := 10000
			)

(** 		fbAxisStop1(Axis := Axis1, Execute := TRUE, Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop1 (
				Axis := Axis1,
				Execute := TRUE,
				Deceleration := 10000
			)

(** 		fbAxisStop2(Axis := Axis2, Execute := TRUE, Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop2 (
				Axis := Axis2,
				Execute := TRUE,
				Deceleration := 10000
			)

(** 		fbAxisStop3(Axis := Axis3, Execute := TRUE, Deceleration := 10000); **)
			(* call - Stmt *)
			CAL fbAxisStop3 (
				Axis := Axis3,
				Execute := TRUE,
				Deceleration := 10000
			)

(**  **)
(**  **)
(** 		IF fbAxisStop0.Error OR fbAxisStop1.Error OR fbAxisStop2.Error OR fbAxisStop3.Error THEN **)
			(* if - Cond *)
			LD fbAxisStop0.Error
			OR fbAxisStop1.Error
			OR fbAxisStop2.Error
			OR fbAxisStop3.Error
			JMPCN ODK_SKIP_00000000000000J_000000000000001

				(* then - Stmts *)

(**  **)
(** 			{*there is an error while attempting to stop 1 or 2 or 3 or 4 of the controllers*} **)
(** 			{*re-initialize the controllers*} **)
(** 			initializationState:=INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000J

(**  **)
(** 		ELSIF fbAxisStop0.Done AND fbAxisStop1.DONE AND fbAxisStop2.Done AND fbAxisStop3.DONE THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000J_000000000000001:
			LD fbAxisStop0.Done
			AND fbAxisStop1.Done
			AND fbAxisStop2.Done
			AND fbAxisStop3.Done
			JMPCN ODK_SKIP_00000000000000J_000000000000002

				(* elsif - Stmts *)

(** 			{*all controllers have stopped*} **)
(** 			{*switch to state init*} **)
(** 			initializationState := INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000J

(**  **)
(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000J_000000000000002:
			ODK_END_IF_00000000000000J:

			JMP ODK_END_IF_000000000000002

(**  **)
(** 	ELSIF initializationState = INITIALIZE_PowerOn THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_00000000000000G:
		LD initializationState
		EQ INITIALIZE_PowerOn
		JMPCN ODK_SKIP_000000000000002_00000000000000H

			(* elsif - Stmts *)

(**  **)
(** 		{*power on all controllers*} **)
(**  **)
(** 		fbPower0(Axis := Axis0, Enable := TRUE); **)
			(* call - Stmt *)
			CAL fbPower0 (
				Axis := Axis0,
				Enable := TRUE
			)

(** 		fbPower1(Axis := Axis1, Enable := TRUE); **)
			(* call - Stmt *)
			CAL fbPower1 (
				Axis := Axis1,
				Enable := TRUE
			)

(** 		fbPower2(Axis := Axis2, Enable := TRUE); **)
			(* call - Stmt *)
			CAL fbPower2 (
				Axis := Axis2,
				Enable := TRUE
			)

(** 		fbPower3(Axis := Axis3, Enable := TRUE); **)
			(* call - Stmt *)
			CAL fbPower3 (
				Axis := Axis3,
				Enable := TRUE
			)

(** 	 **)
(** 		IF fbPower0.Error OR fbPower1.Error OR fbPower2.Error OR fbPower3.Error THEN **)
			(* if - Cond *)
			LD fbPower0.Error
			OR fbPower1.Error
			OR fbPower2.Error
			OR fbPower3.Error
			JMPCN ODK_SKIP_00000000000000K_000000000000001

				(* then - Stmts *)

(** 			{*there is an error while attempting to power on 1 or 2 or 3 or 4 of the controllers*} **)
(** 			{*re-initialize the controllers*} **)
(** 			initializationState:=INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000K

(** 		ELSIF fbPower0.Status AND fbPower1.Status AND fbPower2.Status AND fbPower3.Status THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000K_000000000000001:
			LD fbPower0.Status
			AND fbPower1.Status
			AND fbPower2.Status
			AND fbPower3.Status
			JMPCN ODK_SKIP_00000000000000K_000000000000002

				(* elsif - Stmts *)

(** 		    {*all controllers are powered on*} **)
(** 			{*go start the control sequence*} **)
(** 			Done := TRUE; **)
				(* assign - Stmt *)
				LD TRUE
				ST Done

				JMP ODK_END_IF_00000000000000K

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000K_000000000000002:
			ODK_END_IF_00000000000000K:

			JMP ODK_END_IF_000000000000002

(** 	ELSIF initializationState = INITIALIZE_CanError THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_00000000000000H:
		LD initializationState
		EQ INITIALIZE_CanError
		JMPCN ODK_SKIP_000000000000002_00000000000000I

			(* elsif - Stmts *)

(** 	 **)
(** 		fbCanRecover(Execute:=FALSE); **)
			(* call - Stmt *)
			CAL fbCanRecover (
				Execute := FALSE
			)

(** 		initializationState := INITIALIZE_CanError_loop; **)
			(* assign - Stmt *)
			LD INITIALIZE_CanError_loop
			ST initializationState

			JMP ODK_END_IF_000000000000002

(** 		 **)
(** 	ELSIF initializationState = INITIALIZE_CanError_loop THEN **)
		(* elseif - Cond *) 
		ODK_SKIP_000000000000002_00000000000000I:
		LD initializationState
		EQ INITIALIZE_CanError_loop
		JMPCN ODK_SKIP_000000000000002_00000000000000J

			(* elsif - Stmts *)

(** 		fbCanRecover(Execute:=TRUE); **)
			(* call - Stmt *)
			CAL fbCanRecover (
				Execute := TRUE
			)

(** 		IF fbCanRecover.Error THEN **)
			(* if - Cond *)
			LD fbCanRecover.Error
			JMPCN ODK_SKIP_00000000000000L_000000000000001

				(* then - Stmts *)

(** 		 **)
(** 			lastErrorId:=fbCanRecover.ErrorId; **)
				(* assign - Stmt *)
				LD fbCanRecover.ErrorId
				ST lastErrorId

(** 			internalErrorCounter := internalErrorCounter + 1; **)
				(* assign - Stmt *)
				LD internalErrorCounter
				ADD 1
				ST internalErrorCounter

(** 			initializationState := INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000L

(** 		 **)
(** 		ELSIF fbCanRecover.Done THEN **)
			(* elseif - Cond *) 
			ODK_SKIP_00000000000000L_000000000000001:
			LD fbCanRecover.Done
			JMPCN ODK_SKIP_00000000000000L_000000000000002

				(* elsif - Stmts *)

(** 			initializationState := INITIALIZE_Init; **)
				(* assign - Stmt *)
				LD INITIALIZE_Init
				ST initializationState

				JMP ODK_END_IF_00000000000000L

(** 		END_IF; **)
			(* if - End *) 
			ODK_SKIP_00000000000000L_000000000000002:
			ODK_END_IF_00000000000000L:

			JMP ODK_END_IF_000000000000002

(** 	END_IF;  **)
		(* if - End *) 
		ODK_SKIP_000000000000002_00000000000000J:
		ODK_END_IF_000000000000002:

(** END_IF; **)
	(* if - End *) 
	ODK_END_IF_000000000000001:

(**  **)
(**  **)
(**  **)
(**  **)
(**  **)

END_FUNCTION_BLOCK