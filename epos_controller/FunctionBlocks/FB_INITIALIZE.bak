FUNCTION_BLOCK FB_INITIALIZE
VAR_EXTERNAL
	Axis0 				                    : Axis_REF;                    (* Axis definitions, Node 2, Right Wheel, EPOS controller *)
	Axis1 				                    : Axis_REF;					   (* Axis definitions, Node 1, Left Wheel *)	
END_VAR

VAR_INPUT
	Execute : BOOL;
END_VAR

VAR_OUTPUT
    Done                      : BOOL;
    Error                     : BOOL;
	ErrorID                   : DINT;
END_VAR

VAR
	lastErrorId : DINT :=0;
	internalErrorCounter : UDINT := 0;
	initializationState	: INITIALIZE_STATE;  
	
	fbReadStatus0	: MC_ReadStatus;
	fbReadStatus1	: MC_ReadStatus;
	
	fbPower0		: MC_Power;
	fbPower1		: MC_Power;
	
	fbAxisStop0		: MC_Stop;
	fbAxisStop1		: MC_Stop;
	
END_VAR
IF Execute = FALSE THEN

	initializationState := INITIALIZE_Init;
	Done := FALSE;
	Error := FALSE;
	ErrorId := 0;
	internalErrorCounter := 0;

ELSE

	IF initializationState = INITIALIZE_Init THEN
	
		IF internalErrorCounter >= 5 THEN
		
			Error := TRUE;
			ErrorId := lastErrorId;
			Done := FALSE;
		
		ELSE

			(*initialize both controllers to velocity mode, stand still*)

			fbReadStatus0(Axis := Axis0 , Enable := TRUE);
			fbReadStatus1(Axis := Axis1 , Enable := TRUE);
	
			IF fbReadStatus0.Error OR fbReadStatus1.Error THEN

				(*cannot read the state of one or both controllers*)
				(*go to state canError to check for errors*)

				(*initializationState := MAIN_CanError;*)
				;
	
			ELSIF fbReadStatus0.Valid AND fbReadStatus1.Valid THEN
	
				(*function blocks fbReadStatus0/1 have updated their values*)
				IF fbReadStatus0.Disabled AND fbReadStatus1.Disabled THEN
			
					(*both controllers are disabled*)
					(*switch to state INITIALIZE_PowerOn to enable them*)
					initializationState := INITIALIZE_PowerOn;
			
				ELSIF NOT fbReadStatus0.Disabled THEN
		
					(*axis 0 - EPOS controller - Node 2 - right motor is not disabled*)
					(*switch to state INITIALIZE_CheckAxis0 to disable it*)
		
					initializationState := INITIALIZE_CheckAxis0;

				ELSIF NOT fbReadStatus1.Disabled THEN

					(*axis 1 - EPOS controller - Node 1 - left motor is not disabled*)
					(*switch to state INITIALIZE_CheckAxis1 to disable it*)
	
					initializationState := INITIALIZE_CheckAxis1;

				END_IF;
		
			ELSE
	
				(*the fbReadStatus0/1 blocks have not updated their values yet*)
				(*continue calling them with enable:=TRUE until they do*)
				(*no need to change state*)
				;

			END_IF;

		END_IF;

	ELSIF initializationState = INITIALIZE_CheckAxis0 THEN

		(*check the state of Axis0*)
		(*after the sequence completes the axis will be in the disabled state*)
		(*control is transfered to state INITIALIZE_Init that will start the enable sequence*)

	    fbReadStatus0(Axis := Axis0 , Enable := TRUE);

		IF fbReadStatus0.Error THEN
	
			(*cannot read the status of axis0*)
			(*axis0 is the EPOS controller connected on the CAN bus*)
			(*maybe there is a CAN communication error, switch to state MAIN_CanError*)
			(*initializationState := MAIN_CanError;*)
			;
		
		ELSIF fbReadStatus0.Valid THEN
	
			(*we have read the status of axis0*)
	
			IF fbReadStatus0.Errorstop THEN
				(*the motor is in an error state*)
				(*call the MC_Reset function block to reset it*)
				initializationState := INITIALIZE_Reset0;
			ELSIF fbReadStatus0.Disabled THEN
				(*the motor is in the disabled state, nothing to do*)
				(*switch to MAIN_Init*)
				initializationState := INITIALIZE_Init;
			ELSIF fbReadStatus0.Stopping THEN
				(*the motor is stopping*)
				(*although we could simply wait, force the stop*)
				(*i.e. greater decceleration*)
				initializationState := INITIALIZE_Reset0;
			ELSIF fbReadStatus0.StandStill THEN
				(*the controller is not in an error state but it is enabled*)
				(*power off both controllers*)
				initializationState := INITIALIZE_PowerOff;
			ELSIF fbReadStatus0.DiscreteMotion THEN
				(*i.e. position control*)
				(*stop motion on both controllers*)
				initializationState := INITIALIZE_Stop;
			ELSIF fbReadStatus0.ContinuousMotion THEN
				(*i.e. velocity control*)
				(*stop motion on both controllers*)
				initializationState := INITIALIZE_Stop;		
			ELSIF fbReadStatus0.Homing THEN
				(*stop homing on both controllers*)
				initializationState := INITIALIZE_Stop;
			END_IF;
		ELSE
			(*status not updated yet*)
			;
		END_IF;

	ELSIF initializationState = INITIALIZE_CheckAxis1 THEN

		(*check the state of Axis1*)
		(*after the sequence completes the axis will be in the disabled state*)
		(*control is transfered to state MAIN_Init that will start the enable sequence*)

	    fbReadStatus1(Axis := Axis1 , Enable := TRUE);

		IF fbReadStatus1.Error THEN
	
			(*this is wierd*)
			(*there is no reason why we cannot read our own status*)
			(*axis1 is the EPOS P controller*)
			(*simply increment the internal error counter and try again*)
			internalErrorCounter := internalErrorCounter + 1;
			initializationState := INITIALIZE_Init;
		
		ELSIF fbReadStatus1.Valid THEN
			(*we have read the status of axis1*)
	
			IF fbReadStatus1.Errorstop THEN
				(*the motor is in an error state*)
				(*call the MC_Reset function block to reset it*)
				initializationState := INITIALIZE_Reset1;
			ELSIF fbReadStatus1.Disabled THEN
				(*the motor is in the disabled state, nothing to do*)
				(*switch to MAIN_Init*)
				initializationState := INITIALIZE_Init;
			ELSIF fbReadStatus1.Stopping THEN
				(*the motor is stopping*)
				(*although we could simply wait, force the stop*)
				(*i.e. greater decceleration*)
				initializationState := INITIALIZE_Reset1;
			ELSIF fbReadStatus1.StandStill THEN
				(*the controller is not in an error state but it is enabled*)
				(*power off both controllers*)
				initializationState := INITIALIZE_PowerOff;
			ELSIF fbReadStatus1.DiscreteMotion THEN
				(*i.e. position control*)
				(*stop motion on both controllers*)
				initializationState := INITIALIZE_Stop;
			ELSIF fbReadStatus1.ContinuousMotion THEN
				(*i.e. velocity control*)
				(*stop motion on both controllers*)
				initializationState := INITIALIZE_Stop;		
			ELSIF fbReadStatus1.Homing THEN
				(*stop homing on both controllers*)
				initializationState := INITIALIZE_Stop;
			END_IF;
		ELSE
			(*status not updated yet*)
			;
		END_IF;

	ELSIF initializationState = INITIALIZE_PowerOff THEN

		(*Disable power on both controllers*)
		fbPower0(Axis := Axis0 , Enable := FALSE);
		fbPower1(Axis := Axis1 , Enable := FALSE);

		(*Switch state when both controllers are disabled*)
		IF fbPower0.Error OR fbPower1.Error THEN
	
			initializationState := INITIALIZE_Init;
	
		ELSIF ( NOT fbPower0.Status ) AND ( NOT fbPower1.Status ) THEN
			(*both controllers are disabled, switch to the next state*)
			initializationState := INITIALIZE_Init;
		END_IF;

	ELSIF initializationState = INITIALIZE_Reset0 THEN

		(*reset axis0*)

		fbReset0(Axis := Axis0 , Execute := FALSE);
		initializationState := INITIALIZE_Reset0_loop;

	ELSIF initializationState = INITIALIZE_Reset0_loop THEN

		fbReset0(Axis := Axis0 , Execute := TRUE);
	
		IF fbReset0.ERROR THEN
			(*check for can communication errors*)
			(*initializationState := MAIN_CanError;*)
			;
		ELSIF fbReset0.DONE THEN
			(*done reseting*)
			initializationState := INITIALIZE_Init;
		END_IF;

	ELSIF initializationState = INITIALIZE_Reset1 THEN

		(*reset axis1*)

		fbReset1(Axis := Axis1 , Execute := FALSE);
		initializationState := INITIALIZE_Reset1_loop;

	ELSIF initializationState = INITIALIZE_Reset1_loop THEN

		fbReset1(Axis := Axis1 , Execute := TRUE);
	
		IF fbReset1.ERROR THEN
	
			(*this is wierd*)
			(*there is no reason why we cannot reset our controller*)
			(*axis1 is the EPOS P controller*)
			(*simply increment the internal error counter and try again*)
			internalErrorCounter := internalErrorCounter + 1;
			initializationState := INITIALIZE_Init;
		
		ELSIF fbReset1.DONE THEN
			(*done reseting*)
			initializationState := INITIALIZE_Init;
		END_IF;

	ELSIF initializationState = INITIALIZE_Stop THEN

		(*stop both axis*)

		fbAxisStop0(Axis := Axis0, Execute := FALSE, Deceleration := 10000);
		fbAxisStop1(Axis := Axis1, Execute := FALSE, Deceleration := 10000);

	ELSIF initializationState = INITIALIZE_Stop_loop THEN

		fbAxisStop0(Axis := Axis0, Execute := TRUE, Deceleration := 10000);
		fbAxisStop1(Axis := Axis1, Execute := TRUE, Deceleration := 10000);

		IF fbAxisStop0.Error OR fbAxisStop1.Error THEN

			(*ther is an error while attempting to stop one, or both of the controllers*)
			(*re-initialize the controllers*)
			initializationState:=INITIALIZE_Init;

		ELSIF fbAxisStop0.Done AND fbAxisStop1.DONE THEN
			(*both controllers have stopped*)
			(*switch to state init*)
			initializationState := INITIALIZE_Init;

		END_IF;

	ELSIF initializationState = INITIALIZE_PowerOn THEN

		(*power on both controllers*)

		fbPower0(Axis := Axis0, Enable := TRUE);
		fbPower1(Axis := Axis1, Enable := TRUE);
	
		IF fbPower0.Error OR fbPower1.Error THEN
			(*ther is an error while attempting to power on one, or both of the controllers*)
			(*re-initialize the controllers*)
			initializationState:=INITIALIZE_Init;
		ELSIF fbPower0.Status AND fbPower1.Status THEN
			(*both controllers are powered on*)
			(*go start the control sequence*)
			initializationState := INITIALIZE_ResetTimer;
		END_IF;
	END_IF; 
END_IF;

END_FUNCTION_BLOCK